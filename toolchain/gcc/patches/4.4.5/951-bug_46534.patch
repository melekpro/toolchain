[4.3/4.4/4.5 Regression] ICE optimizing printf ("...>10MBstring\n") into puts

http://gcc.gnu.org/bugzilla/show_bug.cgi?id=46534

--- gcc-4_4-branch/gcc/ChangeLog	2010/12/07 18:18:59	167557
+++ gcc-4_4-branch/gcc/ChangeLog	2010/12/07 18:56:56	167558
@@ -1,3 +1,18 @@
+2010-12-07  Jakub Jelinek  <jakub@redhat.com>
+
+	PR middle-end/46534
+	* builtins.c (expand_builtin_printf): Don't copy and modify string
+	before build_string_literal, instead modify what
+	build_string_literal returned.
+
+	Backport from mainline
+	2010-11-18  Jakub Jelinek  <jakub@redhat.com>
+
+	PR middle-end/46534
+	* builtins.c (fold_builtin_printf): Don't copy and modify string
+	before build_string_literal, instead modify what
+	build_string_literal returned.
+
 2010-10-01  Release Manager
 
 	* GCC 4.4.5 released.
--- gcc-4_4-branch/gcc/builtins.c	2010/12/07 18:18:59	167557
+++ gcc-4_4-branch/gcc/builtins.c	2010/12/07 18:56:56	167558
@@ -5452,14 +5452,30 @@
 	{
 	  /* If the format specifier was "string\n", call puts("string").  */
 	  size_t len = strlen (fmt_str);
-	  if ((unsigned char)fmt_str[len - 1] == target_newline)
+	  if ((unsigned char)fmt_str[len - 1] == target_newline
+	      && (size_t) (int) len == len
+	      && (int) len > 0)
 	    {
+	      char *newstr;
+	      tree offset_node, string_cst;
+
 	      /* Create a NUL-terminated string that's one char shorter
 		 than the original, stripping off the trailing '\n'.  */
-	      char *newstr = XALLOCAVEC (char, len);
-	      memcpy (newstr, fmt_str, len - 1);
-	      newstr[len - 1] = 0;
-	      arg = build_string_literal (len, newstr);
+	      arg = build_string_literal (len, fmt_str);
+	      string_cst = string_constant (arg, &offset_node);
+#ifdef ENABLE_CHECKING
+	      gcc_assert (string_cst
+			  && (TREE_STRING_LENGTH (string_cst)
+			      == (int) len)
+			  && integer_zerop (offset_node)
+			  && (unsigned char)
+			      TREE_STRING_POINTER (string_cst)[len - 1]
+			      == target_newline);
+#endif
+	      /* build_string_literal creates a new STRING_CST,
+		 modify it in place to avoid double copying.  */
+	      newstr = CONST_CAST (char *, TREE_STRING_POINTER (string_cst));
+	      newstr[len - 1] = '\0';
 	      if (fn_puts)
 		fn = build_call_expr (fn_puts, 1, arg);
 	    }
@@ -12844,15 +12860,30 @@
 	{
 	  /* If the string was "string\n", call puts("string").  */
 	  size_t len = strlen (str);
-	  if ((unsigned char)str[len - 1] == target_newline)
+	  if ((unsigned char)str[len - 1] == target_newline
+	      && (size_t) (int) len == len
+	      && (int) len > 0)
 	    {
+	      char *newstr;
+	      tree offset_node, string_cst;
+
 	      /* Create a NUL-terminated string that's one char shorter
 		 than the original, stripping off the trailing '\n'.  */
-	      char *newstr = XALLOCAVEC (char, len);
-	      memcpy (newstr, str, len - 1);
-	      newstr[len - 1] = 0;
-
-	      newarg = build_string_literal (len, newstr);
+	      newarg = build_string_literal (len, str);
+	      string_cst = string_constant (newarg, &offset_node);
+#ifdef ENABLE_CHECKING
+	      gcc_assert (string_cst
+			  && (TREE_STRING_LENGTH (string_cst)
+			      == (int) len)
+			  && integer_zerop (offset_node)
+			  && (unsigned char)
+			      TREE_STRING_POINTER (string_cst)[len - 1]
+			      == target_newline);
+#endif
+	      /* build_string_literal creates a new STRING_CST,
+		 modify it in place to avoid double copying.  */
+	      newstr = CONST_CAST (char *, TREE_STRING_POINTER (string_cst));
+	      newstr[len - 1] = '\0';
 	      if (fn_puts)
 		call = build_call_expr (fn_puts, 1, newarg);
 	    }
--- gcc-4_4-branch/gcc/testsuite/ChangeLog	2010/12/07 18:18:59	167557
+++ gcc-4_4-branch/gcc/testsuite/ChangeLog	2010/12/07 18:56:56	167558
@@ -1,3 +1,10 @@
+2010-12-07  Jakub Jelinek  <jakub@redhat.com>
+
+	Backport from mainline
+	2010-11-18  Jakub Jelinek  <jakub@redhat.com>
+	PR middle-end/46534
+	* gcc.c-torture/compile/pr46534.c: New test.
+
 2010-10-01  Release Manager
 
 	* GCC 4.4.5 released.
--- /dev/null
+++ gcc-4_4-branch/gcc/testsuite/gcc.c-torture/compile/pr46534.c
@@ -0,0 +1,17 @@
+/* PR middle-end/46534 */
+
+extern int printf (const char *, ...);
+
+#define S1 "                    "
+#define S2 S1 S1 S1 S1 S1 S1 S1 S1 S1 S1
+#define S3 S2 S2 S2 S2 S2 S2 S2 S2 S2 S2
+#define S4 S3 S3 S3 S3 S3 S3 S3 S3 S3 S3
+#define S5 S4 S4 S4 S4 S4 S4 S4 S4 S4 S4
+#define S6 S5 S5 S5 S5 S5 S5 S5 S5 S5 S5
+#define S7 S6 S6 S6 S6 S6 S6 S6 S6 S6 S6
+
+void
+foo (void)
+{
+  printf (S7 "\n");
+}
