[4.4/4.5/4.6] new T({""}) crashes G++ when struct T { std::string foobar };

 http://gcc.gnu.org/bugzilla/show_bug.cgi?id=49355

--- trunk/gcc/cp/ChangeLog	2011/06/30 23:13:14	175735
+++ trunk/gcc/cp/ChangeLog	2011/07/01 00:03:34	175736
@@ -1,6 +1,11 @@
 	PR c++/49609
 	* pt.c (resolve_nondeduced_context): Call mark_used.
 
+2011-06-30  Jason Merrill  <jason@redhat.com>
+
+	PR c++/49355
+	* tree.c (stabilize_init): Handle aggregate initialization.
+
 2011-06-29  Jason Merrill  <jason@redhat.com>
 
 	DR 1207
--- trunk/gcc/cp/tree.c	2011/06/30 23:13:14	175735
+++ trunk/gcc/cp/tree.c	2011/07/01 00:03:34	175736
@@ -3291,10 +3291,18 @@  stabilize_init (tree init, tree *initp)
     t = TARGET_EXPR_INITIAL (t);
   if (TREE_CODE (t) == COMPOUND_EXPR)
     t = expr_last (t);
-  if (TREE_CODE (t) == CONSTRUCTOR
-      && EMPTY_CONSTRUCTOR_P (t))
-    /* Default-initialization.  */
-    return true;
+  if (TREE_CODE (t) == CONSTRUCTOR)
+    {
+      /* Aggregate initialization: stabilize each of the field
+	 initializers.  */
+      unsigned i;
+      tree value;
+      bool good = true;
+      FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (t), i, value)
+	if (!stabilize_init (value, initp))
+	  good = false;
+      return good;
+    }
 
   /* If the initializer is a COND_EXPR, we can't preevaluate
      anything.  */
--- /dev/null
+++ trunk/gcc/testsuite/g++.dg/cpp0x/initlist54.C	2011/07/01 00:03:34	175736
@@ -0,0 +1,13 @@
+// PR c++/49355
+// { dg-options -std=c++0x }
+
+#include <string>
+
+struct T {
+  std::string foobar;
+};
+
+int main()
+{
+  T* x = new T({""});
+}
