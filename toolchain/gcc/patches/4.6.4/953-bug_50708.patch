Infinite loop between rshift_double and lshift_double if count is LONG_MIN

 http://gcc.gnu.org/bugzilla/show_bug.cgi?id=50708

--- gcc-4_7-branch/gcc/ChangeLog	2012/07/06 09:21:36	189313
+++ gcc-4_7-branch/gcc/ChangeLog	2012/07/06 09:25:46	189314
@@ -1,6 +1,25 @@
 	* df-problems.c	(can_move_insns_across): When doing
 	memory-reference book-keeping, handle call insns.
 
+2012-07-06  Richard Guenther  <rguenther@suse.de>
+
+	Backport from mainline
+	2012-03-30  Richard Guenther  <rguenther@suse.de>
+
+	PR middle-end/52786
+	* double-int.c (rshift_double): Remove not needed
+	cast.
+
+	2012-03-28  Richard Guenther  <rguenther@suse.de>
+
+	PR middle-end/50708
+	* double-int.h (rshift_double): Remove.
+	* double-int.c (lshift_double): Use abs to make count
+	positive.
+	(rshift_double): Make static, take unsigned count argument,
+	remove handling of negative count argument.
+	(double_int_rshift): Dispatch to lshift_double.
+
 2012-07-06  Nick Clifton  <nickc@redhat.com>
 
 	* config/mn10300/mn10300.c (mn10300_encode_section_info): Call
--- gcc-4_7-branch/gcc/double-int.c	2012/07/06 09:21:36	189313
+++ gcc-4_7-branch/gcc/double-int.c	2012/07/06 09:25:46	189314
@@ -186,24 +186,22 @@
   return (*hv < 0 ? ~(toplow & tophigh) : toplow | tophigh) != 0;
 }
 
-/* Shift the doubleword integer in L1, H1 left by COUNT places
-   keeping only PREC bits of result.
-   Shift right if COUNT is negative.
-   ARITH nonzero specifies arithmetic shifting; otherwise use logical shift.
+/* Shift the doubleword integer in L1, H1 right by COUNT places
+   keeping only PREC bits of result.  ARITH nonzero specifies
+   arithmetic shifting; otherwise use logical shift.
    Store the value as two `HOST_WIDE_INT' pieces in *LV and *HV.  */
 
-void
-lshift_double (unsigned HOST_WIDE_INT l1, HOST_WIDE_INT h1,
-	       HOST_WIDE_INT count, unsigned int prec,
-	       unsigned HOST_WIDE_INT *lv, HOST_WIDE_INT *hv, bool arith)
+static void
+rshift_double (unsigned HOST_WIDE_INT l1, HOST_WIDE_INT h1,
+	       unsigned HOST_WIDE_INT count, unsigned int prec,
+	       unsigned HOST_WIDE_INT *lv, HOST_WIDE_INT *hv,
+	       bool arith)
 {
   unsigned HOST_WIDE_INT signmask;
 
-  if (count < 0)
-    {
-      rshift_double (l1, h1, -count, prec, lv, hv, arith);
-      return;
-    }
+  signmask = (arith
+	      ? -((unsigned HOST_WIDE_INT) h1 >> (HOST_BITS_PER_WIDE_INT - 1))
+	      : 0);
 
   if (SHIFT_COUNT_TRUNCATED)
     count %= prec;
@@ -217,61 +215,58 @@
     }
   else if (count >= HOST_BITS_PER_WIDE_INT)
     {
-      *hv = l1 << (count - HOST_BITS_PER_WIDE_INT);
-      *lv = 0;
+      *hv = 0;
+      *lv = (unsigned HOST_WIDE_INT) h1 >> (count - HOST_BITS_PER_WIDE_INT);
     }
   else
     {
-      *hv = (((unsigned HOST_WIDE_INT) h1 << count)
-	     | (l1 >> (HOST_BITS_PER_WIDE_INT - count - 1) >> 1));
-      *lv = l1 << count;
+      *hv = (unsigned HOST_WIDE_INT) h1 >> count;
+      *lv = ((l1 >> count)
+	     | ((unsigned HOST_WIDE_INT) h1
+		<< (HOST_BITS_PER_WIDE_INT - count - 1) << 1));
     }
 
-  /* Sign extend all bits that are beyond the precision.  */
-
-  signmask = -((prec > HOST_BITS_PER_WIDE_INT
-		? ((unsigned HOST_WIDE_INT) *hv
-		   >> (prec - HOST_BITS_PER_WIDE_INT - 1))
-		: (*lv >> (prec - 1))) & 1);
+  /* Zero / sign extend all bits that are beyond the precision.  */
 
-  if (prec >= 2 * HOST_BITS_PER_WIDE_INT)
+  if (count >= prec)
+    {
+      *hv = signmask;
+      *lv = signmask;
+    }
+  else if ((prec - count) >= 2 * HOST_BITS_PER_WIDE_INT)
     ;
-  else if (prec >= HOST_BITS_PER_WIDE_INT)
+  else if ((prec - count) >= HOST_BITS_PER_WIDE_INT)
     {
-      *hv &= ~((HOST_WIDE_INT) (-1) << (prec - HOST_BITS_PER_WIDE_INT));
-      *hv |= signmask << (prec - HOST_BITS_PER_WIDE_INT);
+      *hv &= ~((HOST_WIDE_INT) (-1) << (prec - count - HOST_BITS_PER_WIDE_INT));
+      *hv |= signmask << (prec - count - HOST_BITS_PER_WIDE_INT);
     }
   else
     {
       *hv = signmask;
-      *lv &= ~((unsigned HOST_WIDE_INT) (-1) << prec);
-      *lv |= signmask << prec;
+      *lv &= ~((unsigned HOST_WIDE_INT) (-1) << (prec - count));
+      *lv |= signmask << (prec - count);
     }
 }
 
-/* Shift the doubleword integer in L1, H1 right by COUNT places
-   keeping only PREC bits of result.  Shift left if COUNT is negative.
+/* Shift the doubleword integer in L1, H1 left by COUNT places
+   keeping only PREC bits of result.
+   Shift right if COUNT is negative.
    ARITH nonzero specifies arithmetic shifting; otherwise use logical shift.
    Store the value as two `HOST_WIDE_INT' pieces in *LV and *HV.  */
 
 void
-rshift_double (unsigned HOST_WIDE_INT l1, HOST_WIDE_INT h1,
+lshift_double (unsigned HOST_WIDE_INT l1, HOST_WIDE_INT h1,
 	       HOST_WIDE_INT count, unsigned int prec,
-	       unsigned HOST_WIDE_INT *lv, HOST_WIDE_INT *hv,
-	       bool arith)
+	       unsigned HOST_WIDE_INT *lv, HOST_WIDE_INT *hv, bool arith)
 {
   unsigned HOST_WIDE_INT signmask;
 
   if (count < 0)
     {
-      lshift_double (l1, h1, -count, prec, lv, hv, arith);
+      rshift_double (l1, h1, abs (count), prec, lv, hv, arith);
       return;
     }
 
-  signmask = (arith
-	      ? -((unsigned HOST_WIDE_INT) h1 >> (HOST_BITS_PER_WIDE_INT - 1))
-	      : 0);
-
   if (SHIFT_COUNT_TRUNCATED)
     count %= prec;
 
@@ -284,36 +279,35 @@
     }
   else if (count >= HOST_BITS_PER_WIDE_INT)
     {
-      *hv = 0;
-      *lv = (unsigned HOST_WIDE_INT) h1 >> (count - HOST_BITS_PER_WIDE_INT);
+      *hv = l1 << (count - HOST_BITS_PER_WIDE_INT);
+      *lv = 0;
     }
   else
     {
-      *hv = (unsigned HOST_WIDE_INT) h1 >> count;
-      *lv = ((l1 >> count)
-	     | ((unsigned HOST_WIDE_INT) h1
-		<< (HOST_BITS_PER_WIDE_INT - count - 1) << 1));
+      *hv = (((unsigned HOST_WIDE_INT) h1 << count)
+	     | (l1 >> (HOST_BITS_PER_WIDE_INT - count - 1) >> 1));
+      *lv = l1 << count;
     }
 
-  /* Zero / sign extend all bits that are beyond the precision.  */
+  /* Sign extend all bits that are beyond the precision.  */
 
-  if (count >= (HOST_WIDE_INT)prec)
-    {
-      *hv = signmask;
-      *lv = signmask;
-    }
-  else if ((prec - count) >= 2 * HOST_BITS_PER_WIDE_INT)
+  signmask = -((prec > HOST_BITS_PER_WIDE_INT
+		? ((unsigned HOST_WIDE_INT) *hv
+		   >> (prec - HOST_BITS_PER_WIDE_INT - 1))
+		: (*lv >> (prec - 1))) & 1);
+
+  if (prec >= 2 * HOST_BITS_PER_WIDE_INT)
     ;
-  else if ((prec - count) >= HOST_BITS_PER_WIDE_INT)
+  else if (prec >= HOST_BITS_PER_WIDE_INT)
     {
-      *hv &= ~((HOST_WIDE_INT) (-1) << (prec - count - HOST_BITS_PER_WIDE_INT));
-      *hv |= signmask << (prec - count - HOST_BITS_PER_WIDE_INT);
+      *hv &= ~((HOST_WIDE_INT) (-1) << (prec - HOST_BITS_PER_WIDE_INT));
+      *hv |= signmask << (prec - HOST_BITS_PER_WIDE_INT);
     }
   else
     {
       *hv = signmask;
-      *lv &= ~((unsigned HOST_WIDE_INT) (-1) << (prec - count));
-      *lv |= signmask << (prec - count);
+      *lv &= ~((unsigned HOST_WIDE_INT) (-1) << prec);
+      *lv |= signmask << prec;
     }
 }
 
@@ -895,7 +889,7 @@
 double_int_rshift (double_int a, HOST_WIDE_INT count, unsigned int prec, bool arith)
 {
   double_int ret;
-  rshift_double (a.low, a.high, count, prec, &ret.low, &ret.high, arith);
+  lshift_double (a.low, a.high, -count, prec, &ret.low, &ret.high, arith);
   return ret;
 }
 
--- gcc-4_7-branch/gcc/double-int.h	2012/07/06 09:21:36	189313
+++ gcc-4_7-branch/gcc/double-int.h	2012/07/06 09:25:46	189314
@@ -300,9 +300,6 @@
 extern void lshift_double (unsigned HOST_WIDE_INT, HOST_WIDE_INT,
 			   HOST_WIDE_INT, unsigned int,
 			   unsigned HOST_WIDE_INT *, HOST_WIDE_INT *, bool);
-extern void rshift_double (unsigned HOST_WIDE_INT, HOST_WIDE_INT,
-			   HOST_WIDE_INT, unsigned int,
-			   unsigned HOST_WIDE_INT *, HOST_WIDE_INT *, bool);
 extern int div_and_round_double (unsigned, int, unsigned HOST_WIDE_INT,
 				 HOST_WIDE_INT, unsigned HOST_WIDE_INT,
 				 HOST_WIDE_INT, unsigned HOST_WIDE_INT *,
--- trunk/gcc/tree-ssa-loop-ivopts.c	2011/08/18 12:37:53	177852
+++ trunk/gcc/tree-ssa-loop-ivopts.c	2011/08/18 12:42:22	177853
@@ -2892,26 +2892,6 @@
     return cand->var_before;
 }
 
-/* Return the most significant (sign) bit of T.  Similar to tree_int_cst_msb,
-   but the bit is determined from TYPE_PRECISION, not MODE_BITSIZE.  */
-
-int
-tree_int_cst_sign_bit (const_tree t)
-{
-  unsigned bitno = TYPE_PRECISION (TREE_TYPE (t)) - 1;
-  unsigned HOST_WIDE_INT w;
-
-  if (bitno < HOST_BITS_PER_WIDE_INT)
-    w = TREE_INT_CST_LOW (t);
-  else
-    {
-      w = TREE_INT_CST_HIGH (t);
-      bitno -= HOST_BITS_PER_WIDE_INT;
-    }
-
-  return (w >> bitno) & 1;
-}
-
 /* If A is (TYPE) BA and B is (TYPE) BB, and the types of BA and BB have the
    same precision that is at least as wide as the precision of TYPE, stores
    BA to A and BB to B, and returns the type of BA.  Otherwise, returns the
--- trunk/gcc/tree.c	2011/08/18 12:37:53	177852
+++ trunk/gcc/tree.c	2011/08/18 12:42:22	177853
@@ -6513,21 +6513,23 @@
   return TREE_INT_CST_LOW (t);
 }
 
-/* Return the most significant bit of the integer constant T.  */
+/* Return the most significant (sign) bit of T.  */
 
 int
-tree_int_cst_msb (const_tree t)
+tree_int_cst_sign_bit (const_tree t)
 {
-  int prec;
-  HOST_WIDE_INT h;
-  unsigned HOST_WIDE_INT l;
-
-  /* Note that using TYPE_PRECISION here is wrong.  We care about the
-     actual bits, not the (arbitrary) range of the type.  */
-  prec = GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (t))) - 1;
-  rshift_double (TREE_INT_CST_LOW (t), TREE_INT_CST_HIGH (t), prec,
-		 2 * HOST_BITS_PER_WIDE_INT, &l, &h, 0);
-  return (l & 1) == 1;
+  unsigned bitno = TYPE_PRECISION (TREE_TYPE (t)) - 1;
+  unsigned HOST_WIDE_INT w;
+
+  if (bitno < HOST_BITS_PER_WIDE_INT)
+    w = TREE_INT_CST_LOW (t);
+  else
+    {
+      w = TREE_INT_CST_HIGH (t);
+      bitno -= HOST_BITS_PER_WIDE_INT;
+    }
+
+  return (w >> bitno) & 1;
 }
 
 /* Return an indication of the sign of the integer constant T.
--- trunk/gcc/tree.h	2011/08/18 12:37:53	177852
+++ trunk/gcc/tree.h	2011/08/18 12:42:22	177853
@@ -4380,7 +4380,6 @@
   return TREE_INT_CST_LOW (t);
 }
 #endif
-extern int tree_int_cst_msb (const_tree);
 extern int tree_int_cst_sgn (const_tree);
 extern int tree_int_cst_sign_bit (const_tree);
 extern unsigned int tree_int_cst_min_precision (tree, bool);
