[4.6/4.7/4.8/4.9 Regression] std::uncaught_exception returns true while constructing exception.

 http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59224

--- gcc-4_8-branch/libstdc++-v3/ChangeLog	2014/01/27 13:58:42	207130
+++ gcc-4_8-branch/libstdc++-v3/ChangeLog	2014/01/27 13:58:48	207131
@@ -1,3 +1,12 @@
+2014-01-27  Jason Merrill  <jason@redhat.com>
+
+	Core DR 475
+	PR c++/41174
+	PR c++/59224
+	* libsupc++/eh_throw.cc (__cxa_throw): Set uncaughtExceptions.
+	* libsupc++/eh_alloc.cc (__cxa_allocate_dependent_exception)
+	(__cxa_allocate_exception): Don't set it here.
+
 2013-04-12  Release Manager
 
 	* GCC 4.6.4 released.
--- gcc-4_8-branch/gcc/testsuite/g++.dg/eh/uncaught1.C	2014/01/27 13:58:42	207130
+++ gcc-4_8-branch/gcc/testsuite/g++.dg/eh/uncaught1.C	2014/01/27 13:58:48	207131
@@ -13,7 +13,7 @@
 
 static Check const data[] = {
   { 0, 0, false },	// construct [0]
-  { 1, 0, true  },	// [1] = [0]
+  { 1, 0, false  },	// [1] = [0]
   { 0, 0, true  },	// destruct [0]
   { 2, 1, true  },	// [2] = [1]
   { 2, 2, true  },      // destruct [2]
--- /dev/null
+++ gcc-4_8-branch/gcc/testsuite/g++.dg/eh/uncaught4.C	2014/01/27 13:58:48	207131
@@ -0,0 +1,29 @@
+// PR c++/41174
+// { dg-do run }
+
+#include <exception>
+
+#define assert(E) if (!(E)) __builtin_abort();
+
+struct e {
+  e()
+  {
+    assert( !std::uncaught_exception() );
+    try {
+      throw 1;
+    } catch (int i) {
+      assert( !std::uncaught_exception() );
+      throw;
+    }
+  }
+};
+
+int main()
+{
+  try {
+    throw e();
+  } catch (int i) {
+    assert( !std::uncaught_exception() );
+  }
+  assert( !std::uncaught_exception() );
+}
--- gcc-4_8-branch/libstdc++-v3/libsupc++/eh_alloc.cc	2014/01/27 13:58:42	207130
+++ gcc-4_8-branch/libstdc++-v3/libsupc++/eh_alloc.cc	2014/01/27 13:58:48	207131
@@ -129,12 +129,6 @@ __cxxabiv1::__cxa_allocate_exception(std
 	std::terminate ();
     }
 
-  // We have an uncaught exception as soon as we allocate memory.  This
-  // yields uncaught_exception() true during the copy-constructor that
-  // initializes the exception object.  See Issue 475.
-  __cxa_eh_globals *globals = __cxa_get_globals ();
-  globals->uncaughtExceptions += 1;
-
   memset (ret, 0, sizeof (__cxa_refcounted_exception));
 
   return (void *)((char *)ret + sizeof (__cxa_refcounted_exception));
@@ -191,12 +185,6 @@  __cxxabiv1::__cxa_allocate_dependent_exc
 	std::terminate ();
     }
 
-  // We have an uncaught exception as soon as we allocate memory.  This
-  // yields uncaught_exception() true during the copy-constructor that
-  // initializes the exception object.  See Issue 475.
-  __cxa_eh_globals *globals = __cxa_get_globals ();
-  globals->uncaughtExceptions += 1;
-
   memset (ret, 0, sizeof (__cxa_dependent_exception));
 
   return ret;
--- gcc-4_8-branch/libstdc++-v3/libsupc++/eh_throw.cc	2014/01/27 13:58:42	207130
+++ gcc-4_8-branch/libstdc++-v3/libsupc++/eh_throw.cc	2014/01/27 13:58:48	207131
@@ -62,6 +62,9 @@ __cxxabiv1::__cxa_throw (void *obj, std:
 __cxxabiv1::__cxa_throw (void *obj, std::type_info *tinfo, 
 			 void (*dest) (void *))
 {
+  __cxa_eh_globals *globals = __cxa_get_globals ();
+  globals->uncaughtExceptions += 1;
+
   // Definitely a primary.
   __cxa_refcounted_exception *header
     = __get_refcounted_exception_header_from_obj (obj);
