[4.6 Regression] scev introduces signed overflow

 http://gcc.gnu.org/bugzilla/show_bug.cgi?id=53501

--- gcc-4_7-branch/gcc/ChangeLog	2012/05/30 12:29:26	188009
+++ gcc-4_7-branch/gcc/ChangeLog	2012/05/30 12:32:10	188010
@@ -1,6 +1,17 @@
 	* tree-pretty-print.c (dump_generic_node): Guard against
 	NULL_TREE TREE_TYPE when dumping MEM_REF offset type.
 
+2012-06-01  Eric Botcazou  <ebotcazou@adacore.com>
+
+	PR middle-end/53501
+	* fold-const.c (fold_binary_loc): Refine previous change.
+
+2012-05-30  Richard Guenther  <rguenther@suse.de>
+
+	PR middle-end/53501
+	* fold-const.c (fold_binary_loc): Make sure to call
+	fold_plusminus_mult_expr with the original sign of operands.
+
 2012-05-24  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>
 
 	Backport from mainline
--- gcc-4_7-branch/gcc/testsuite/ChangeLog	2012/05/30 12:29:26	188009
+++ gcc-4_7-branch/gcc/testsuite/ChangeLog	2012/05/30 12:32:10	188010
@@ -1,6 +1,12 @@
 	* gcc.target/powerpc/cell_builtin_7.c: Ditto.
 	* gcc.target/powerpc/cell_builtin_8.c: Ditto.
 
+2012-05-30  Richard Guenther  <rguenther@suse.de>
+
+	PR middle-end/53501
+	* gcc.dg/torture/pr53501.c: New testcase.
+	* c-c++-common/restrict-2.c: Adjust.
+
 2012-05-23  Michael Hope  <michael.hope@linaro.org>
 
 	PR c++/52796
--- gcc-4_7-branch/gcc/fold-const.c	2012/05/30 12:29:26	188009
+++ gcc-4_7-branch/gcc/fold-const.c	2012/05/30 12:32:10	188010
@@ -10337,12 +10337,15 @@ fold_binary_loc (location_t loc,
 	    }
 	}
 
-      /* Handle (A1 * C1) + (A2 * C2) with A1, A2 or C1, C2 being the
-	 same or one.  Make sure type is not saturating.
-	 fold_plusminus_mult_expr will re-associate.  */
+      /* Handle (A1 * C1) + (A2 * C2) with A1, A2 or C1, C2 being the same or
+	 one.  Make sure the type is not saturating and has the signedness of
+	 the stripped operands, as fold_plusminus_mult_expr will re-associate.
+	 ??? The latter condition should use TYPE_OVERFLOW_* flags instead.  */
       if ((TREE_CODE (arg0) == MULT_EXPR
 	   || TREE_CODE (arg1) == MULT_EXPR)
 	  && !TYPE_SATURATING (type)
+	  && TYPE_UNSIGNED (type) == TYPE_UNSIGNED (TREE_TYPE (arg0))
+	  && TYPE_UNSIGNED (type) == TYPE_UNSIGNED (TREE_TYPE (arg1))
 	  && (!FLOAT_TYPE_P (type) || flag_associative_math))
         {
 	  tree tem = fold_plusminus_mult_expr (loc, code, type, arg0, arg1);
@@ -10946,12 +10949,15 @@ fold_binary_loc (location_t loc,
 	  && (tem = distribute_real_division (loc, code, type, arg0, arg1)))
 	return tem;
 
-      /* Handle (A1 * C1) - (A2 * C2) with A1, A2 or C1, C2 being the
-	 same or one.  Make sure type is not saturating.
-	 fold_plusminus_mult_expr will re-associate.  */
+      /* Handle (A1 * C1) - (A2 * C2) with A1, A2 or C1, C2 being the same or
+	 one.  Make sure the type is not saturating and has the signedness of
+	 the stripped operands, as fold_plusminus_mult_expr will re-associate.
+	 ??? The latter condition should use TYPE_OVERFLOW_* flags instead.  */
       if ((TREE_CODE (arg0) == MULT_EXPR
 	   || TREE_CODE (arg1) == MULT_EXPR)
 	  && !TYPE_SATURATING (type)
+	  && TYPE_UNSIGNED (type) == TYPE_UNSIGNED (TREE_TYPE (arg0))
+	  && TYPE_UNSIGNED (type) == TYPE_UNSIGNED (TREE_TYPE (arg1))
 	  && (!FLOAT_TYPE_P (type) || flag_associative_math))
         {
 	  tree tem = fold_plusminus_mult_expr (loc, code, type, arg0, arg1);
--- /dev/null
+++ gcc-4_7-branch/gcc/testsuite/gcc.dg/torture/pr53501.c
@@ -0,0 +1,22 @@
+/* { dg-do run } */
+
+extern void abort (void);
+
+int e[100], n, here;
+
+void __attribute__((noinline))
+foo(void)
+{
+  int i, k = 0;
+  for (i = 0; i < n; ++i) { e[k] = 10; ++k; e[k] = 10; ++k; }
+  for (i = 0; i < k; ++i) here = 1;
+  if (here != 1)
+    abort ();
+}
+
+int main(void)
+{
+  n = 10;
+  foo();
+  return 0;
+}
