ICE with variably sized types returned from nested functions

 http://gcc.gnu.org/bugzilla/show_bug.cgi?id=8081

--- trunk/gcc/ChangeLog	2012/01/13 11:33:39	183152
+++ trunk/gcc/ChangeLog	2012/01/13 12:05:27	183153
@@ -1,6 +1,12 @@
 	* recog.c (peep2_find_free_register): Determine clobbered registers
 	from insn pattern.
 
+2012-01-13  Richard Guenther  <rguenther@suse.de>
+
+	PR middle-end/8081
+	* gimplify.c (gimplify_modify_expr_rhs): For calls with a
+	variable-sized result always use RSO.
+
 2012-01-12  Georg-Johann Lay  <avr@gjlay.de>
 
 	Backport from mainline r183129
--- trunk/gcc/gimplify.c	2012/01/13 11:33:39	183152
+++ trunk/gcc/gimplify.c	2012/01/13 12:05:27	183153
@@ -4417,6 +4417,11 @@ gimplify_modify_expr_rhs (tree *expr_p,
 		/* It's OK to use the target directly if it's being
 		   initialized. */
 		use_target = true;
+	      else if (variably_modified_type_p (TREE_TYPE (*to_p), NULL_TREE))
+		/* Always use the target and thus RSO for variable-sized types.
+		   GIMPLE cannot deal with a variable-sized assignment
+		   embedded in a call statement.  */
+		use_target = true;
 	      else if (!is_gimple_non_addressable (*to_p))
 		/* Don't use the original target if it's already addressable;
 		   if its address escapes, and the called function uses the
--- trunk/gcc/testsuite/ChangeLog	2012/01/13 11:33:39	183152
+++ trunk/gcc/testsuite/ChangeLog	2012/01/13 12:05:27	183153
@@ -1,6 +1,11 @@
 	* gfortran.dg/init_flag_8.f90: New.
 	* gfortran.dg/init_flag_9.f90: New.
 
+2012-01-13  Richard Guenther  <rguenther@suse.de>
+
+	PR middle-end/8081
+	* gcc.dg/torture/pr8081.c: New testcase.
+
 2012-01-12  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>
 
 	Backport from mainline:
--- /dev/null
+++ trunk/gcc/testsuite/gcc.dg/torture/pr8081.c	2012/01/13 12:05:27	183153
@@ -0,0 +1,26 @@
+/* { dg-do run } */
+
+extern void abort (void);
+int
+main (int argc, char **argv)
+{
+  int size = 10;
+  typedef struct
+    {
+      char val[size];
+    }
+  block;
+  block a, b;
+  block __attribute__((noinline))
+  retframe_block ()
+    {
+      return *(block *) &b;
+    }
+  b.val[0] = -1;
+  b.val[9] = -2;
+  a=retframe_block ();
+  if (a.val[0] != -1
+      || a.val[9] != -2)
+    abort ();
+  return 0;
+}
