[4.6 Regression] ICE when using cold attribute

 http://gcc.gnu.org/bugzilla/show_bug.cgi?id=48600

--- gcc-4_6-branch/gcc/ChangeLog	2012/03/23 13:27:45	185738
+++ gcc-4_6-branch/gcc/ChangeLog	2012/03/23 14:22:24	185739
@@ -1,6 +1,14 @@
 	benefit speed path.
 	(execute_pre): Use flag_tree_partial_pre.
 
+2012-03-16  Jan Hubicka  <jh@suse.cz>
+
+	Backport from mainline
+	PR middle-end/48600
+	PR regression/52696
+	* predict.c (predict_paths_for_bb): Prevent looping.
+	(predict_paths_leading_to_edge, predict_paths_leading_to): Update.
+
 2012-03-01  Jakub Jelinek  <jakub@redhat.com>
 
 	PR tree-optimization/52445
--- gcc-4_6-branch/gcc/predict.c	2012/03/23 13:27:45	185738
+++ gcc-4_6-branch/gcc/predict.c	2012/03/23 14:22:24	185739
@@ -1790,7 +1790,8 @@
 static void
 predict_paths_for_bb (basic_block cur, basic_block bb,
 		      enum br_predictor pred,
-		      enum prediction taken)
+		      enum prediction taken,
+		      bitmap visited)
 {
   edge e;
   edge_iterator ei;
@@ -1811,7 +1812,7 @@
 	continue;
       gcc_assert (bb == cur || dominated_by_p (CDI_POST_DOMINATORS, cur, bb));
 
-      /* See if there is how many edge from e->src that is not abnormal
+      /* See if there is an edge from e->src that is not abnormal
 	 and does not lead to BB.  */
       FOR_EACH_EDGE (e2, ei2, e->src->succs)
 	if (e2 != e
@@ -1824,16 +1825,20 @@
 
       /* If there is non-abnormal path leaving e->src, predict edge
 	 using predictor.  Otherwise we need to look for paths
-	 leading to e->src.  */
+	 leading to e->src.
+
+	 The second may lead to infinite loop in the case we are predicitng
+	 regions that are only reachable by abnormal edges.  We simply
+	 prevent visiting given BB twice.  */
       if (found)
         predict_edge_def (e, pred, taken);
-      else
-	predict_paths_for_bb (e->src, e->src, pred, taken);
+      else if (bitmap_set_bit (visited, e->src->index))
+	predict_paths_for_bb (e->src, e->src, pred, taken, visited);
     }
   for (son = first_dom_son (CDI_POST_DOMINATORS, cur);
        son;
        son = next_dom_son (CDI_POST_DOMINATORS, son))
-    predict_paths_for_bb (son, bb, pred, taken);
+    predict_paths_for_bb (son, bb, pred, taken, visited);
 }
 
 /* Sets branch probabilities according to PREDiction and
@@ -1843,7 +1848,9 @@
 predict_paths_leading_to (basic_block bb, enum br_predictor pred,
 			  enum prediction taken)
 {
-  predict_paths_for_bb (bb, bb, pred, taken);
+  bitmap visited = BITMAP_ALLOC (NULL);
+  predict_paths_for_bb (bb, bb, pred, taken, visited);
+  BITMAP_FREE (visited);
 }
 
 /* Like predict_paths_leading_to but take edge instead of basic block.  */
@@ -1866,7 +1873,11 @@
 	break;
       }
   if (!has_nonloop_edge)
-    predict_paths_for_bb (bb, bb, pred, taken);
+    {
+      bitmap visited = BITMAP_ALLOC (NULL);
+      predict_paths_for_bb (bb, bb, pred, taken, visited);
+      BITMAP_FREE (visited);
+    }
   else
     predict_edge_def (e, pred, taken);
 }
--- gcc-4_6-branch/gcc/testsuite/ChangeLog	2012/03/23 13:27:45	185738
+++ gcc-4_6-branch/gcc/testsuite/ChangeLog	2012/03/23 14:22:24	185739
@@ -1,6 +1,11 @@
 	PR c++/52796
 	* g++.dg/cpp0x/variadic-value1.C: New.
 
+2012-03-16  Jan Hubicka  <jh@suse.cz>
+
+	PR middle-end/48600
+	* g++.dg/torture/pr48600.C: New testcase.
+
 2012-03-01  Jakub Jelinek  <jakub@redhat.com>
 
 	PR tree-optimization/52445
--- /dev/null
+++ gcc-4_6-branch/gcc/testsuite/g++.dg/torture/pr48600.C	2012/03/23 14:22:24	185739
@@ -0,0 +1,16 @@
+/* { dg-do compile } */
+
+class mx {
+public:
+    mx();
+};
+
+int main()
+{
+  while (true) {
+      mx *bar = new mx;
+      mx *baz = new mx;
+      continue;
+  }
+  return 0;
+}
