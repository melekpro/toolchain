[4.7/4.8 Regression] Internal compiler error: in strip_typedefs, at cp/tree.c:1199

 http://gcc.gnu.org/bugzilla/show_bug.cgi?id=55032

--- gcc-4_6-branch/gcc/tree.c	(revision 194285)
+++ gcc-4_6-branch/gcc/tree.c	(revision 194286)
@@ -7282,10 +7282,15 @@
 
   if (shared)
     {
+      tree old_t = t;
       hashval_t hashcode = iterative_hash_object (TYPE_HASH (elt_type), 0);
       if (index_type)
 	hashcode = iterative_hash_object (TYPE_HASH (index_type), hashcode);
       t = type_hash_canon (hashcode, t);
+      if (t != old_t)
+	/* Lay it out again in case the element type has been completed since
+	   the array was added to the hash table.  */
+	layout_type (t);
     }
 
   if (TYPE_CANONICAL (t) == t)
--- gcc-4_6-branch/gcc/ChangeLog	(revision 194285)
+++ gcc-4_6-branch/gcc/ChangeLog	(revision 194286)
@@ -1,3 +1,9 @@
+2012-12-06  Jason Merrill  <jason@redhat.com>
+
+	PR c++/55032
+	* tree.c (build_array_type_1): Re-layout if we found it in the
+	hash table.
+
 2012-11-27  Richard Biener  <rguenther@suse.de>
 
 	PR middle-end/55331
--- gcc-4_6-branch/gcc/testsuite/g++.dg/template/array24.C	(revision 0)
+++ gcc-4_6-branch/gcc/testsuite/g++.dg/template/array24.C	(revision 194286)
@@ -0,0 +1,22 @@
+// PR c++/55032
+
+template<typename T>
+struct vec3t {
+  T c[3];
+};
+
+typedef vec3t<float> vec3;
+
+class Bounds {
+  public:
+    Bounds(const vec3 bb[2]);
+    void foo(const vec3 & v) { v.c[0]; }
+};
+
+template<typename T>
+void work(T& value);
+
+void foo() {
+  vec3 bb[2];
+  work(bb);
+}
