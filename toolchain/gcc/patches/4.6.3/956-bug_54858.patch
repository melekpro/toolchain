[4.6/4.7/4.8 Regression] ICE in cp_tree_equal

 http://gcc.gnu.org/bugzilla/show_bug.cgi?id=54858

--- gcc-4_7-branch/gcc/cp/ChangeLog	2012/10/08 19:39:56	192220
+++ gcc-4_7-branch/gcc/cp/ChangeLog	2012/10/08 19:42:06	192221
@@ -1,3 +1,8 @@
+2012-10-08  Jakub Jelinek  <jakub@redhat.com>
+
+	PR c++/54858
+	* tree.c (cp_tree_equal): Handle FIELD_DECL.
+
 2012-04-03  Jason Merrill  <jason@redhat.com>
 
 	PR c++/52796
--- gcc-4_7-branch/gcc/cp/tree.c	2012/10/08 19:39:56	192220
+++ gcc-4_7-branch/gcc/cp/tree.c	2012/10/08 19:42:06	192221
@@ -2366,6 +2366,7 @@
 
     case VAR_DECL:
     case CONST_DECL:
+    case FIELD_DECL:
     case FUNCTION_DECL:
     case TEMPLATE_DECL:
     case IDENTIFIER_NODE:
--- gcc-4_7-branch/gcc/testsuite/ChangeLog	2012/10/08 19:39:56	192220
+++ gcc-4_7-branch/gcc/testsuite/ChangeLog	2012/10/08 19:42:06	192221
@@ -1,3 +1,8 @@
+2012-10-08  Jakub Jelinek  <jakub@redhat.com>
+
+	PR c++/54858
+	* g++.dg/template/pr54858.C: New test.
+
 2012-09-15  Joseph Myers  <joseph@codesourcery.com>
 
 	PR c/54552
--- /dev/null
+++ gcc-4_7-branch/gcc/testsuite/g++.dg/template/pr54858.C	2012/10/08 19:42:06	192221
@@ -0,0 +1,21 @@
+// PR c++/54858
+// { dg-do compile }
+
+template <int> struct A {};
+template <typename T, T *> struct B {};
+template <typename D> struct C
+{
+  A<0> c0; B<A<0>, &C::c0> d0;	// { dg-error "could not convert template argument" }
+  A<0> c1; B<A<0>, &C::c1> d1;	// { dg-error "could not convert template argument" }
+  A<0> c2; B<A<0>, &C::c2> d2;	// { dg-error "could not convert template argument" }
+  A<0> c3; B<A<0>, &C::c3> d3;	// { dg-error "could not convert template argument" }
+  A<0> c4; B<A<0>, &C::c4> d4;	// { dg-error "could not convert template argument" }
+  A<0> c5; B<A<0>, &C::c5> d5;	// { dg-error "could not convert template argument" }
+  A<0> c6; B<A<0>, &C::c6> d6;	// { dg-error "could not convert template argument" }
+  A<0> c7; B<A<0>, &C::c7> d7;	// { dg-error "could not convert template argument" }
+  A<0> c8; B<A<0>, &C::c8> d8;	// { dg-error "could not convert template argument" }
+  A<0> c9; B<A<0>, &C::c9> d9;	// { dg-error "could not convert template argument" }
+  A<0> ca; B<A<0>, &C::ca> da;	// { dg-error "could not convert template argument" }
+  A<0> cb; B<A<0>, &C::cb> db;	// { dg-error "could not convert template argument" }
+};
+C<int> e;
