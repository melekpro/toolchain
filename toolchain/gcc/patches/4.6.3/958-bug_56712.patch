[4.6 Regression] constructor function is called twice

 http://gcc.gnu.org/bugzilla/show_bug.cgi?id=56712

--- trunk/gcc/ChangeLog	2011/10/31 14:04:50	180699
+++ trunk/gcc/ChangeLog	2011/10/31 14:26:38	180700
@@ -1,6 +1,10 @@
 	* reload1.c (set_initial_label_offsets): Use initial offsets
 	for labels on the nonlocal_goto_handler_labels chain.
 
+2011-10-31  Paul Brook  <paul@codesourcery.com>
+
+	* cgraphunit.c: Don't mark clones as static constructors.
+
 2011-10-29  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>
 
 	PR target/50691
--- trunk/gcc/cgraphunit.c	2011/10/31 14:04:50	180699
+++ trunk/gcc/cgraphunit.c	2011/10/31 14:26:38	180700
@@ -2366,6 +2366,10 @@
   SET_DECL_ASSEMBLER_NAME (new_decl, DECL_NAME (new_decl));
   SET_DECL_RTL (new_decl, NULL);
 
+  /* When the old decl was a con-/destructor make sure the clone isn't.  */
+  DECL_STATIC_CONSTRUCTOR(new_decl) = 0;
+  DECL_STATIC_DESTRUCTOR(new_decl) = 0;
+
   /* Create the new version's call-graph node.
      and update the edges of the new node. */
   new_version_node =
--- trunk/gcc/testsuite/ChangeLog	2011/10/31 14:04:50	180699
+++ trunk/gcc/testsuite/ChangeLog	2011/10/31 14:26:38	180700
@@ -1,6 +1,10 @@
 
 	* gcc.c-torture/compile/20110907.c: New file.
 
+2011-10-31  Paul Brook  <paul@codesourcery.com>
+
+	* gcc.dg/constructor-1.c: New test.
+
 2011-10-29  Paolo Carlini  <paolo.carlini@oracle.com>
 
 	PR c++/50901
--- /dev/null
+++ trunk/gcc/testsuite/gcc.dg/constructor-1.c	2011/10/31 14:26:38	180700
@@ -0,0 +1,37 @@
+/* { dg-do run } */
+/* { dg-options "-O2" } */
+
+/* The ipa-split pass pulls the body of the if(!x) block
+   into a separate function to make foo a better inlining
+   candidate.  Make sure this new function isn't also run
+   as a static constructor.  */
+
+#include <stdlib.h>
+
+int x, y;
+
+void __attribute__((noinline))
+bar(void)
+{
+  y++;
+}
+
+void __attribute__((constructor))
+foo(void)
+{
+  if (!x)
+    {
+      bar();
+      y++;
+    }   
+} 
+
+int main()
+{
+  x = 1;
+  foo();
+  foo();
+  if (y != 2)
+    abort();
+  exit(0);
+}
