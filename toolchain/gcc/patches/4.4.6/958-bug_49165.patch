[4.4/4.5 Regression] ICE on for-loop/throw combination

 http://gcc.gnu.org/bugzilla/show_bug.cgi?id=49165

--- gcc-4_4-branch/gcc/ChangeLog	2011/07/19 19:28:41	176482
+++ gcc-4_4-branch/gcc/ChangeLog	2011/07/19 19:31:01	176484
@@ -1,6 +1,18 @@
 2011-07-19  Jakub Jelinek  <jakub@redhat.com>
 
 	Backport from mainline
+	2011-05-27  Jakub Jelinek  <jakub@redhat.com>
+
+	PR c++/49165
+	* c-common.c (c_common_truthvalue_conversion) <case COND_EXPR>: For
+	C++ don't call c_common_truthvalue_conversion on void type arms.
+
+	2011-05-26  Jakub Jelinek  <jakub@redhat.com>
+
+	PR c++/49165
+	* gimplify.c (shortcut_cond_r): Don't special case
+	COND_EXPRs if they have void type on one of their arms.
+
 	2011-05-23  Jakub Jelinek  <jakub@redhat.com>
 
 	PR middle-end/48973
--- gcc-4_4-branch/gcc/c-common.c	2011/07/19 19:29:57	176483
+++ gcc-4_4-branch/gcc/c-common.c	2011/07/19 19:31:01	176484
@@ -3430,13 +3430,18 @@
 					       TREE_OPERAND (expr, 0));
 
     case COND_EXPR:
-      /* Distribute the conversion into the arms of a COND_EXPR.  */
-      return fold_build3 (COND_EXPR, truthvalue_type_node,
-		TREE_OPERAND (expr, 0),
-		c_common_truthvalue_conversion (location,
-						TREE_OPERAND (expr, 1)),
-		c_common_truthvalue_conversion (location,
-						TREE_OPERAND (expr, 2)));
+      {
+	tree op1 = TREE_OPERAND (expr, 1);
+	tree op2 = TREE_OPERAND (expr, 2);
+        /* In C++ one of the arms might have void type if it is throw.  */
+	if (!VOID_TYPE_P (TREE_TYPE (op1)))
+	  op1 = c_common_truthvalue_conversion (location, op1);
+	if (!VOID_TYPE_P (TREE_TYPE (op2)))
+	  op2 = c_common_truthvalue_conversion (location, op2);
+	/* Distribute the conversion into the arms of a COND_EXPR.  */
+	return fold_build3 (COND_EXPR, truthvalue_type_node,
+			    TREE_OPERAND (expr, 0), op1, op2);
+      }
 
     CASE_CONVERT:
       /* Don't cancel the effect of a CONVERT_EXPR from a REFERENCE_TYPE,
--- gcc-4_4-branch/gcc/gimplify.c	2011/07/19 19:28:41	176482
+++ gcc-4_4-branch/gcc/gimplify.c	2011/07/19 19:29:57	176483
@@ -2570,13 +2570,18 @@
 			   false_label_p);
       append_to_statement_list (t, &expr);
     }
-  else if (TREE_CODE (pred) == COND_EXPR)
+  else if (TREE_CODE (pred) == COND_EXPR
+	   && !VOID_TYPE_P (TREE_TYPE (TREE_OPERAND (pred, 1)))
+	   && !VOID_TYPE_P (TREE_TYPE (TREE_OPERAND (pred, 2))))
     {
       /* As long as we're messing with gotos, turn if (a ? b : c) into
 	 if (a)
 	   if (b) goto yes; else goto no;
 	 else
-	   if (c) goto yes; else goto no;  */
+	   if (c) goto yes; else goto no;
+
+	 Don't do this if one of the arms has void type, which can happen
+	 in C++ when the arm is throw.  */
       expr = build3 (COND_EXPR, void_type_node, TREE_OPERAND (pred, 0),
 		     shortcut_cond_r (TREE_OPERAND (pred, 1), true_label_p,
 				      false_label_p),
--- gcc-4_4-branch/gcc/testsuite/ChangeLog	2011/07/19 19:28:41	176482
+++ gcc-4_4-branch/gcc/testsuite/ChangeLog	2011/07/19 19:31:01	176484
@@ -1,6 +1,16 @@
 2011-07-19  Jakub Jelinek  <jakub@redhat.com>
 
 	Backport from mainline
+	2011-05-27  Jakub Jelinek  <jakub@redhat.com>
+
+	PR c++/49165
+	* g++.dg/eh/cond6.C: New test.
+
+	2011-05-26  Jakub Jelinek  <jakub@redhat.com>
+
+	PR c++/49165
+	* g++.dg/eh/cond5.C: New test.
+
 	2011-05-23  Jakub Jelinek  <jakub@redhat.com>
 
 	PR middle-end/48973
--- /dev/null
+++ gcc-4_4-branch/gcc/testsuite/g++.dg/eh/cond5.C	2011/07/19 19:29:57	176483
@@ -0,0 +1,43 @@
+// PR c++/49165
+// { dg-do run }
+
+extern "C" void abort ();
+
+int
+foo (bool x, int y)
+{
+  if (y < 10 && (x ? true : throw 1))
+    y++;
+  if (y > 20 || (x ? true : throw 2))
+    y++;
+  return y;
+}
+
+int
+main ()
+{
+  if (foo (true, 0) != 2
+      || foo (true, 10) != 11
+      || foo (false, 30) != 31)
+    abort ();
+  try
+    {
+      foo (false, 0);
+      abort ();
+    }
+  catch (int i)
+    {
+      if (i != 1)
+	abort ();
+    }
+  try
+    {
+      foo (false, 10);
+      abort ();
+    }
+  catch (int i)
+    {
+      if (i != 2)
+	abort ();
+    }
+}
--- /dev/null
+++ gcc-4_4-branch/gcc/testsuite/g++.dg/eh/cond6.C	2011/07/19 19:31:01	176484
@@ -0,0 +1,43 @@
+// PR c++/49165
+// { dg-do run }
+
+extern "C" void abort ();
+
+int
+foo (bool x, int y)
+{
+  if (y < 10 && (x ? 1 : throw 1))
+    y++;
+  if (y > 20 || (x ? 1 : throw 2))
+    y++;
+  return y;
+}
+
+int
+main ()
+{
+  if (foo (true, 0) != 2
+      || foo (true, 10) != 11
+      || foo (false, 30) != 31)
+    abort ();
+  try
+    {
+      foo (false, 0);
+      abort ();
+    }
+  catch (int i)
+    {
+      if (i != 1)
+	abort ();
+    }
+  try
+    {
+      foo (false, 10);
+      abort ();
+    }
+  catch (int i)
+    {
+      if (i != 2)
+	abort ();
+    }
+}
