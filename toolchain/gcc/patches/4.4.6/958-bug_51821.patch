[4.5/4.6/4.7 Regression] 64bit > 32bit conversion produces incorrect results with optimizations

 http://gcc.gnu.org/bugzilla/show_bug.cgi?id=51821

--- gcc-4_4-branch/gcc/ChangeLog	2012/01/15 20:27:17	183199
+++ gcc-4_4-branch/gcc/ChangeLog	2012/01/15 20:38:32	183200
@@ -1,3 +1,13 @@
+2012-01-15  Uros Bizjak  <ubizjak@gmail.com>
+
+	PR rtl-optimization/51821
+	* recog.c (peep2_find_free_register): Determine clobbered registers
+	from insn pattern.
+
+2012-01-09  Richard Sandiford  <rdsandiford@googlemail.com>
+
+	* config/mips/mips.md (loadgp_newabi_<mode>): Add missing earlyclobber.
+
 	2011-12-28  Leonid Lisovskiy
 	Backport from 4.5
 	2009-09-26  Michael Matz  <matz@suse.de>
--- gcc-4_4-branch/gcc/config/mips/mips.md	2012/01/09 22:11:46	183036
+++ gcc-4_4-branch/gcc/config/mips/mips.md	2012/01/09 22:13:40	183037
@@ -4615,7 +4615,7 @@
 ;; of _gp from the start of this function.  Operand 1 is the incoming
 ;; function address.
 (define_insn_and_split "loadgp_newabi_<mode>"
-  [(set (match_operand:P 0 "register_operand" "=d")
+  [(set (match_operand:P 0 "register_operand" "=&d")
 	(unspec_volatile:P [(match_operand:P 1)
 			    (match_operand:P 2 "register_operand" "d")]
 			   UNSPEC_LOADGP))]
--- gcc-4_4-branch/gcc/recog.c	2012/01/15 20:27:17	183199
+++ gcc-4_4-branch/gcc/recog.c	2012/01/15 20:38:32	183200
@@ -2933,6 +2933,7 @@
   static int search_ofs;
   enum reg_class cl;
   HARD_REG_SET live;
+  df_ref *def_rec;
   int i;
 
   gcc_assert (from < MAX_INSNS_PER_PEEP2 + 1);
@@ -2950,13 +2951,15 @@
 
   while (from != to)
     {
-      HARD_REG_SET this_live;
+      gcc_assert (peep2_insn_data[from].insn != NULL_RTX);
+
+      /* Don't use registers set or clobbered by the insn.  */
+      for (def_rec = DF_INSN_DEFS (peep2_insn_data[from].insn);
+	   *def_rec; def_rec++)
+	SET_HARD_REG_BIT (live, DF_REF_REGNO (*def_rec));
 
       if (++from >= MAX_INSNS_PER_PEEP2 + 1)
 	from = 0;
-      gcc_assert (peep2_insn_data[from].insn != NULL_RTX);
-      REG_SET_TO_HARD_REG_SET (this_live, peep2_insn_data[from].live_before);
-      IOR_HARD_REG_SET (live, this_live);
     }
 
   cl = (class_str[0] == 'r' ? GENERAL_REGS
--- gcc-4_4-branch/gcc/testsuite/ChangeLog	2012/01/15 20:27:17	183199
+++ gcc-4_4-branch/gcc/testsuite/ChangeLog	2012/01/15 20:38:32	183200
@@ -1,3 +1,8 @@
+2012-01-15  Uros Bizjak  <ubizjak@gmail.com>
+
+	PR rtl-optimization/51821
+	* gcc.dg/pr51821.c: New test.
+
 2011-10-19  Jason Merrill  <jason@redhat.com>
 
 	PR c++/50793
--- /dev/null
+++ gcc-4_4-branch/gcc/testsuite/gcc.dg/pr51821.c	2012/01/17 16:33:53	183257
@@ -0,0 +1,25 @@
+/* { dg-do run } */
+/* { dg-options "-std=c99 -O2" } */
+/* { dg-options "-std=c99 -O2 -msse" { target { i?86-*-* x86_64-*-* } } } */
+/* { dg-require-effective-target sse_runtime { target { i?86-*-* x86_64-*-* } } } */
+
+extern void abort (void);
+
+unsigned int  __attribute__((noinline))
+test (int shift_size)
+{
+  unsigned long long res = ~0;
+
+  return res << shift_size;
+}
+
+int
+main ()
+{
+  int dst = 32;
+
+  if (test (dst) != 0)
+    abort ();
+
+  return 0;
+}
-- 
