unchanged variables in code which calls setjmp may be clobbered (including the return-address)

 http://gcc.gnu.org/bugzilla/show_bug.cgi?id=48542

--- gcc-4_4-branch/gcc/ChangeLog	2011/06/17 11:19:21	175143
+++ gcc-4_4-branch/gcc/ChangeLog	2011/06/17 11:20:01	175144
@@ -1,3 +1,14 @@
+2011-06-17  Hans-Peter Nilsson  <hp@axis.com>
+
+	Backport from mainline
+	2011-06-17  Hans-Peter Nilsson  <hp@axis.com>
+
+	PR rtl-optimization/48542
+	* reload.c (find_equiv_reg): Stop looking when finding a
+	setjmp-type call.
+	* reload1.c (reload_as_needed): Invalidate all reload
+	registers when crossing a setjmp-type call.
+
 2011-06-10  Steven Bosscher  <steven@gcc.gnu.org>
 
 	Backport from mainline
--- gcc-4_4-branch/gcc/reload.c	2011/06/17 11:19:21	175143
+++ gcc-4_4-branch/gcc/reload.c	2011/06/17 11:20:01	175144
@@ -6731,6 +6731,15 @@
 	  || num > PARAM_VALUE (PARAM_MAX_RELOAD_SEARCH_INSNS))
 	return 0;
 
+      /* Don't reuse register contents from before a setjmp-type
+	 function call; on the second return (from the longjmp) it
+	 might have been clobbered by a later reuse.  It doesn't
+	 seem worthwhile to actually go and see if it is actually
+	 reused even if that information would be readily available;
+	 just don't reuse it across the setjmp call.  */
+      if (CALL_P (p) && find_reg_note (p, REG_SETJMP, NULL_RTX))
+	return 0;
+
       if (NONJUMP_INSN_P (p)
 	  /* If we don't want spill regs ...  */
 	  && (! (reload_reg_p != 0
--- gcc-4_4-branch/gcc/reload1.c	2011/06/17 11:19:21	175143
+++ gcc-4_4-branch/gcc/reload1.c	2011/06/17 11:20:01	175144
@@ -4428,6 +4428,13 @@
 	{
 	  AND_COMPL_HARD_REG_SET (reg_reloaded_valid, call_used_reg_set);
 	  AND_COMPL_HARD_REG_SET (reg_reloaded_valid, reg_reloaded_call_part_clobbered);
+
+	  /* If this is a call to a setjmp-type function, we must not
+	     reuse any reload reg contents across the call; that will
+	     just be clobbered by other uses of the register in later
+	     code, before the longjmp.  */
+	  if (find_reg_note (insn, REG_SETJMP, NULL_RTX))
+	    CLEAR_HARD_REG_SET (reg_reloaded_valid);
 	}
     }
 
--- gcc-4_4-branch/gcc/testsuite/ChangeLog	2011/06/17 11:20:01	175144
+++ gcc-4_4-branch/gcc/testsuite/ChangeLog	2011/06/17 11:20:38	175145
@@ -1,3 +1,11 @@
+2011-06-17  Hans-Peter Nilsson  <hp@axis.com>
+
+	Backport from mainline
+	2011-06-17  Hans-Peter Nilsson  <hp@axis.com>
+
+	PR rtl-optimization/48542
+	* gcc.dg/torture/pr48542.c: New test.
+
 2011-05-29  Richard Sandiford  <rdsandiford@googlemail.com>
 
 	* gcc.target/mips/reg-var-1.c: New test.
--- /dev/null
+++ gcc-4_4-branch/gcc/testsuite/gcc.dg/torture/pr48542.c	2011/06/17 11:20:38	175145
@@ -0,0 +1,57 @@
+/* { dg-do run } */
+/* The return-address was clobbered.  */
+#include <stdlib.h>
+#include <setjmp.h>
+
+jmp_buf env;
+extern void sub(void);
+extern void sub3(void);
+int called;
+__attribute__ ((__noinline__))
+int sjtest()
+{
+  int i;
+  if (setjmp(env))
+    return 99;
+
+  for (i = 0; i < 10; i++)
+    sub();
+
+  longjmp(env, 1);
+}
+
+__attribute__ ((__noinline__))
+void sub(void)
+{
+  called++;
+}
+
+int called3;
+__attribute__ ((__noinline__))
+int sjtest3()
+{
+  int i;
+  if (setjmp(env))
+    return 42;
+
+  for (i = 0; i < 10; i++)
+    sub3();
+  return 0;
+}
+
+__attribute__ ((__noinline__))
+void sub3(void)
+{
+  called3++;
+  if (called3 == 10)
+    longjmp (env, 1);
+}
+
+int main(void)
+{
+  if (sjtest() != 99 || called != 10)
+    abort();
+  if (sjtest3() != 42 || called3 != 10)
+    abort();
+  exit (0);
+}
