[4.5/4.6/4.7 Regression][c++0x] Incorrect result of static_cast to rvalue reference to base class.

 http://gcc.gnu.org/bugzilla/show_bug.cgi?id=51406

--- gcc-4_5-branch/gcc/testsuite/ChangeLog	(revision 182339)
+++ gcc-4_5-branch/gcc/testsuite/ChangeLog	(revision 182340)
@@ -1,3 +1,10 @@
+2011-12-13  Jason Merrill  <jason@redhat.com>
+
+	PR c++/51406
+	PR c++/51161
+	* g++.dg/cpp0x/rv-cast3.C: New.
+	* g++.dg/cpp0x/rv-cast4.C: New.
+
 2011-07-19  Jakub Jelinek  <jakub@redhat.com>
 
 	Backport from mainline
--- gcc-4_5-branch/gcc/testsuite/g++.dg/cpp0x/rv-cast3.C	(revision 0)
+++ gcc-4_5-branch/gcc/testsuite/g++.dg/cpp0x/rv-cast3.C	(revision 182340)
@@ -0,0 +1,17 @@
+// PR c++/51406
+// { dg-do run { target c++11 } }
+
+extern "C" int printf(const char *,...);
+extern "C" void abort();
+
+struct A { int a; A() : a(1) {} };
+struct B { int b; B() : b(2) {} };
+struct X : A, B {};
+
+int main() {
+    X x;
+    int a=static_cast<A&&>(x).a;
+    int b=static_cast<B&&>(x).b;
+    // printf ("%d %d\n", a, b);
+    if (a!=1 || b!=2) abort();
+}
--- gcc-4_5-branch/gcc/testsuite/g++.dg/cpp0x/rv-cast4.C	(revision 0)
+++ gcc-4_5-branch/gcc/testsuite/g++.dg/cpp0x/rv-cast4.C	(revision 182340)
@@ -0,0 +1,13 @@
+// PR c++/51161
+// { dg-do compile { target c++11 } }
+
+struct A{};
+struct B : A{};
+struct C : A{};
+struct D : B, C{};
+
+int main()
+{
+  D d;
+  static_cast<A &&>(d);		// { dg-error "ambiguous" }
+}
--- gcc-4_5-branch/gcc/cp/typeck.c	(revision 182339)
+++ gcc-4_5-branch/gcc/cp/typeck.c	(revision 182340)
@@ -5674,8 +5674,18 @@ build_static_cast_1 (tree type, tree expr, bool c_
       && reference_related_p (TREE_TYPE (type), intype)
       && (c_cast_p || at_least_as_qualified_p (TREE_TYPE (type), intype)))
     {
-      expr = build_typed_address (expr, type);
-      return convert_from_reference (expr);
+      /* Handle the lvalue case here by casting to lvalue reference and
+	 then changing it to an rvalue reference.  Casting an xvalue to
+	 rvalue reference will be handled by the main code path.  */
+      tree lref = cp_build_reference_type (TREE_TYPE (type), false);
+      result = (perform_direct_initialization_if_possible
+		(lref, expr, c_cast_p, complain));
+      result = cp_fold_convert (type, result);
+      /* Make sure we don't fold back down to a named rvalue reference,
+	 because that would be an lvalue.  */
+      if (DECL_P (result))
+	result = build1 (NON_LVALUE_EXPR, type, result);
+      return convert_from_reference (result);
     }
 
   orig = expr;
--- gcc-4_5-branch/gcc/cp/ChangeLog	(revision 182339)
+++ gcc-4_5-branch/gcc/cp/ChangeLog	(revision 182340)
@@ -1,3 +1,10 @@
+2011-12-13  Jason Merrill  <jason@redhat.com>
+
+	PR c++/51406
+	PR c++/51161
+	* typeck.c (build_static_cast_1): Fix cast of lvalue to
+	base rvalue reference.
+
 2011-07-19  Jakub Jelinek  <jakub@redhat.com>
 
 	Backport from mainline
