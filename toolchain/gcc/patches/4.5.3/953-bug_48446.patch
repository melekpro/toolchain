[4.3/4.4/4.5/4.6 Regression] internal compiler error: in gimplify_var_or_parm_decl, at gimplify.c:1946

 http://gcc.gnu.org/bugzilla/show_bug.cgi?id=48446

--- gcc-4_6-branch/gcc/testsuite/ChangeLog	(revision 173513)
+++ gcc-4_6-branch/gcc/testsuite/ChangeLog	(revision 173514)
@@ -91,6 +91,11 @@
 	PR c++/49440
 	* g++.dg/rtti/anon-ns1.C: New.
 
+2011-05-06  Jason Merrill  <jason@redhat.com>
+
+	* g++.dg/ext/vla10.C: New.
+	* c-c++-common/vla-1.c: New.
+
 2011-05-03  Jakub Jelinek  <jakub@redhat.com>
 
 	Backport from mainline
--- gcc-4_6-branch/gcc/testsuite/g++.dg/ext/vla10.C	(revision 0)
+++ gcc-4_6-branch/gcc/testsuite/g++.dg/ext/vla10.C	(revision 173514)
@@ -0,0 +1,32 @@
+// PR c++/48446
+// { dg-options "" }
+
+template<typename T>
+struct A
+{
+  ~A ();
+  T *operator-> () const;
+};
+
+struct B
+{
+  typedef A <B> P;
+  static P foo (int);
+};
+
+struct C
+{
+  typedef A<C> P;
+  static const int c = 80;
+};
+
+C::P bar ();
+
+void
+baz ()
+{
+  char z[bar ()->c];
+  {
+    B::P m = B::foo (sizeof (z));
+  }
+}
--- gcc-4_6-branch/gcc/testsuite/c-c++-common/vla-1.c	(revision 0)
+++ gcc-4_6-branch/gcc/testsuite/c-c++-common/vla-1.c	(revision 173514)
@@ -0,0 +1,21 @@
+/* Test that changes to a variable are reflected in a VLA later in the
+   expression.  */
+/* { dg-options "" } */
+
+#ifdef __cplusplus
+extern "C"
+#endif
+void abort();
+
+int i = 4;
+int f()
+{
+  return i;
+}
+
+int main()
+{
+  if (i+=2, sizeof(*(int(*)[f()])0) != 6*sizeof(int))
+    abort();
+  return 0;
+}
--- gcc-4_6-branch/gcc/cp/init.c	(revision 173513)
+++ gcc-4_6-branch/gcc/cp/init.c	(revision 173514)
@@ -45,7 +45,6 @@
 static tree sort_mem_initializers (tree, tree);
 static tree initializing_context (tree);
 static void expand_cleanup_for_base (tree, tree);
-static tree get_temp_regvar (tree, tree);
 static tree dfs_initialize_vtbl_ptrs (tree, void *);
 static tree build_dtor_call (tree, special_function_kind, int);
 static tree build_field_list (tree, tree, int *);
@@ -2871,7 +2870,7 @@
    things when it comes time to do final cleanups (which take place
    "outside" the binding contour of the function).  */
 
-static tree
+tree
 get_temp_regvar (tree type, tree init)
 {
   tree decl;
--- gcc-4_6-branch/gcc/cp/decl.c	(revision 173513)
+++ gcc-4_6-branch/gcc/cp/decl.c	(revision 173514)
@@ -7499,6 +7499,39 @@
   return 0;
 }
 
+/* *expr_p is part of the TYPE_SIZE of a variably-sized array.  If any
+   SAVE_EXPRs in *expr_p wrap expressions with side-effects, break those
+   expressions out into temporary variables so that walk_tree doesn't
+   step into them (c++/15764).  */
+
+static tree
+stabilize_save_expr_r (tree *expr_p, int *walk_subtrees, void *data)
+{
+  struct pointer_set_t *pset = (struct pointer_set_t *)data;
+  tree expr = *expr_p;
+  if (TREE_CODE (expr) == SAVE_EXPR)
+    {
+      tree op = TREE_OPERAND (expr, 0);
+      cp_walk_tree (&op, stabilize_save_expr_r, data, pset);
+      if (TREE_SIDE_EFFECTS (op))
+	TREE_OPERAND (expr, 0) = get_temp_regvar (TREE_TYPE (op), op);
+      *walk_subtrees = 0;
+    }
+  else if (!EXPR_P (expr) || !TREE_SIDE_EFFECTS (expr))
+    *walk_subtrees = 0;
+  return NULL;
+}
+
+/* Entry point for the above.  */
+
+static void
+stabilize_vla_size (tree size)
+{
+  struct pointer_set_t *pset = pointer_set_create ();
+  /* Break out any function calls into temporary variables.  */
+  cp_walk_tree (&size, stabilize_save_expr_r, pset, pset);
+}
+
 /* Given the SIZE (i.e., number of elements) in an array, compute an
    appropriate index type for the array.  If non-NULL, NAME is the
    name of the thing being declared.  */
@@ -8951,7 +8984,12 @@ grokdeclarator (const cp_declarator *declarator,
 	      && (decl_context == NORMAL || decl_context == FIELD)
 	      && at_function_scope_p ()
 	      && variably_modified_type_p (type, NULL_TREE))
-	    finish_expr_stmt (TYPE_SIZE (type));
+	    {
+	      /* First break out any side-effects.  */
+	      stabilize_vla_size (TYPE_SIZE (type));
+	      /* And then force evaluation of the SAVE_EXPR.  */
+	      finish_expr_stmt (TYPE_SIZE (type));
+	    }
 
 	  if (declarator->kind == cdk_reference)
 	    {
@@ -9026,6 +9064,14 @@
 	}
     }
 
+  /* We need to stabilize side-effects in VLA sizes for regular array
+     declarations too, not just pointers to arrays.  */
+  if (type != error_mark_node && !TYPE_NAME (type)
+      && (decl_context == NORMAL || decl_context == FIELD)
+      && at_function_scope_p ()
+      && variably_modified_type_p (type, NULL_TREE))
+    stabilize_vla_size (TYPE_SIZE (type));
+
   if (unqualified_id && TREE_CODE (unqualified_id) == TEMPLATE_ID_EXPR
       && TREE_CODE (type) != FUNCTION_TYPE
       && TREE_CODE (type) != METHOD_TYPE)
--- gcc-4_6-branch/gcc/cp/ChangeLog	(revision 173513)
+++ gcc-4_6-branch/gcc/cp/ChangeLog	(revision 173514)
@@ -1,6 +1,14 @@
 	* class.c (set_linkage_according_to_type): Hand off to
 	determine_visibility.
 
+2011-05-06  Jason Merrill  <jason@redhat.com>
+
+	PR c++/48446
+	* decl.c (stabilize_save_expr_r, stabilize_vla_size): New.
+	(grokdeclarator): Use stabilize_vla_size.
+	* init.c (get_temp_regvar): No longer static.
+	* cp-tree.h: Declare it.
+
 2011-04-27  Jason Merrill  <jason@redhat.com>
 
 	PR c++/48046
--- gcc-4_6-branch/gcc/cp/cp-tree.h	(revision 173513)
+++ gcc-4_6-branch/gcc/cp/cp-tree.h	(revision 173514)
@@ -4958,6 +4958,7 @@
 extern tree build_new				(VEC(tree,gc) **, tree, tree,
 						 VEC(tree,gc) **, int,
                                                  tsubst_flags_t);
+extern tree get_temp_regvar			(tree, tree);
 extern tree build_vec_init			(tree, tree, tree, bool, int,
                                                  tsubst_flags_t);
 extern tree build_delete			(tree, tree,
