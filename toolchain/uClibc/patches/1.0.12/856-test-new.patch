test: New tests

1. dlopen/ constload1

diff --git a/test/dlopen/Makefile.in b/test/dlopen/Makefile.in
--- a/test/dlopen/Makefile.in
+++ b/test/dlopen/Makefile.in
@@ -4,7 +4,7 @@
 export UCLIBC_ONLY := 1
 
 TESTS := dltest dltest2 dlstatic test1 test2 test3 dlundef dlafk dladdr \
-	testscope nodelete nodelete1 tst-origin
+	testscope constload1 nodelete nodelete1 tst-origin
 
 ifneq ($(HAVE_SHARED),y)
 TESTS_DISABLED := test3
@@ -42,6 +43,13 @@ LDFLAGS_libtest.so := -lpthread
 LDFLAGS_libC.so := -ldl
 LDFLAGS_libB.so := ./libC.so -Wl,-rpath,.
 LDFLAGS_libA.so := ./libB.so -Wl,-rpath,.
+
+constload1: constload2mod.so constload3mod.so
+constload1_glibc: constload2mod.so.glibc constload3mod.so.glibc
+LDFLAGS_constload1 := -ldl
+LDFLAGS_constload2mod.so := -ldl
+LDFLAGS-OMIT-constload2mod.so := -Wl,-z,now
+LDFLAGS-OMIT-constload3mod.so := -Wl,-z,now
 
 nodelete: nodelmod1.so nodelmod2.so nodelmod3.so
 nodelete_glibc: nodelmod1.so.glibc nodelmod2.so.glibc nodelmod3.so.glibc
diff --git b/test/dlopen/constload1.c b/test/dlopen/constload1.c
new file mode 100644
--- /dev/null
+++ b/test/dlopen/constload1.c
@@ -0,0 +1,29 @@
+#include <dlfcn.h>
+#include <errno.h>
+#include <error.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+int
+main (void)
+{
+  int (*foo) (void);
+  void *h;
+  int ret;
+
+  h = dlopen ("constload2mod.so"_SO_EXT1, RTLD_LAZY | RTLD_GLOBAL);
+  if (h == NULL)
+    error (EXIT_FAILURE, errno, "cannot load module constload2mod");
+  foo = dlsym (h, "foo");
+  ret = foo ();
+  /* Note that the following dlclose() call cannot unload the objects.
+     Due to the introduced relocation dependency constload2.so depends
+     on constload3.so and the dependencies of constload2.so on constload3.so
+     is not visible to ld.so since it's done using dlopen().  */
+  if (dlclose (h) != 0)
+    {
+      puts ("failed to close");
+      exit (EXIT_FAILURE);
+    }
+  return ret;
+}
diff --git b/test/dlopen/constload2mod.c b/test/dlopen/constload2mod.c
new file mode 100644
--- /dev/null
+++ b/test/dlopen/constload2mod.c
@@ -0,0 +1,51 @@
+#include <dlfcn.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+extern int bar (void);
+extern int baz (void);
+extern int foo (void);
+extern void __attribute__ ((__constructor__)) init (void);
+
+void *h;
+
+int
+foo (void)
+{
+  return 42 + bar ();
+}
+
+int
+baz (void)
+{
+  return -21;
+}
+
+#define LIBNAME1	"constload3mod.so"_SO_EXT1
+
+void
+__attribute__ ((__constructor__))
+init (void)
+{
+  h = dlopen (LIBNAME1, RTLD_GLOBAL | RTLD_LAZY);
+  if (h == NULL)
+    {
+      puts ("failed to load "LIBNAME1);
+      exit (1);
+    }
+  else
+    puts ("succeeded loading "LIBNAME1);
+}
+
+static void
+__attribute__ ((__destructor__))
+fini (void)
+{
+  if (dlclose (h) != 0)
+    {
+      puts ("failed to unload "LIBNAME1);
+      exit (1);
+    }
+  else
+    puts ("succeeded unloading "LIBNAME1);
+}
diff --git b/test/dlopen/constload3mod.c b/test/dlopen/constload3mod.c
new file mode 100644
--- /dev/null
+++ b/test/dlopen/constload3mod.c
@@ -0,0 +1,8 @@
+extern int baz (void);
+extern int bar (void);
+
+int
+bar (void)
+{
+  return -21 + baz ();
+}
-- 
