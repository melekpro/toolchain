From df3a5fcc8d1c3402289375c92df705e978fab58d
From: Timo Ter√§s <timo.teras@iki.fi>
Date: Tue, 08 Jan 2013 09:55:26 +0000
Subject: dl: fix dlsym lookups with RTLD_NEXT

The current code for dlsym() when invoked with RTLD_NEXT lookup
searches for the module where it's being called from, and executes the
_dl_find_hash only for the next module in the chain. However, if the
looked symbol is not there, the rest of the modules are not checked.

Generally this is not a problem as symbols are merged for the parent
modules; so this affects only RTLD_NEXT.

This patch adds a loop iterating through all the following modules.

--- a/ldso/libdl/libdl.c
+++ b/ldso/libdl/libdl.c
@@ -671,7 +671,7 @@ static void *do_dlsym(void *vhandle, con
 {
 	struct elf_resolve *tpnt, *tfrom;
 	struct dyn_elf *handle;
-	ElfW(Addr) from;
+	ElfW(Addr) from = 0;
 	struct dyn_elf *rpnt;
 	void *ret;
 	struct symbol_ref sym_ref = { NULL, NULL };
@@ -729,7 +729,12 @@ static void *do_dlsym(void *vhandle, con
 	tpnt = NULL;
 	if (handle == _dl_symbol_tables)
 		tpnt = handle->dyn; /* Only search RTLD_GLOBAL objs if global object */
-	ret = _dl_find_hash(name2, &handle->dyn->symbol_scope, tpnt, ELF_RTYPE_CLASS_DLSYM, &sym_ref);
+	do {
+		ret = _dl_find_hash(name2, &handle->dyn->symbol_scope, tpnt, ELF_RTYPE_CLASS_DLSYM, &sym_ref);
+		if (ret != NULL)
+			break;
+		handle = handle->next;
+	} while (from && handle);
 
 #if defined(USE_TLS) && USE_TLS && defined SHARED
 	if (sym_ref.sym && (ELF_ST_TYPE(sym_ref.sym->st_info) == STT_TLS) && (sym_ref.tpnt)) {
