test: Isolate from host default libraries if TEST_INSTALLED_UCLIBC not set

Additionally, allow to build separate glibc shared objects(*.so.glibc).
 Pass -D_GLIBC_TEST compiler flag for host builds, define _SO_EXT for use
 in application code in testsuite.h


Signed-off-by: Leonid Lisovskiy <lly.dev@gmail.com>

diff --git a/test/Rules.mak b/test/Rules.mak
--- a/test/Rules.mak
+++ b/test/Rules.mak
@@ -72,6 +72,10 @@ CFLAGS         += $(OPTIMIZATION) $(CPU_CFLAGS) $(XWARNINGS)
 # Can't add $(OPTIMIZATION) here, it may be target-specific.
 # Just adding -Os for now.
 HOST_CFLAGS    += $(XCOMMON_CFLAGS) -Os $(XWARNINGS) -std=gnu99
+ifeq ($(ARCH_NATIVE_BIT),32)
+	HOST_CFLAGS   += -m32
+	HOST_LDFLAGS  += -m32
+endif
 
 LDFLAGS        := $(CPU_LDFLAGS-y) -Wl,-z,now
 ifeq ($(DODEBUG),y)
@@ -89,14 +93,14 @@ ifneq ($(HAVE_SHARED),y)
 endif
 
 ifndef TEST_INSTALLED_UCLIBC
+LDFLAGS += -nodefaultlibs -L$(UCLIBC_PATH)
 LDFLAGS += -B$(UCLIBC_PATH) -Wl,-rpath,$(UCLIBC_PATH):$(shell pwd) -Wl,-rpath-link,$(UCLIBC_PATH):$(shell pwd)
-else
-LDFLAGS += -Wl,-rpath,$(shell pwd)
-endif
-
 ifeq ($(findstring -static,$(LDFLAGS)),)
 LDFLAGS += -Wl,--dynamic-linker,$(UCLIBC_PATH)/$(UCLIBC_LDSO)
 endif
+else
+LDFLAGS += -Wl,-rpath,$(shell pwd)
+endif
 
 ifeq ($(LDSO_GNU_HASH_SUPPORT),y)
 # Check for binutils support is done on root Rules.mak
diff --git a/test/Test.mak b/test/Test.mak
--- a/test/Test.mak
+++ b/test/Test.mak
@@ -102,13 +102,13 @@ $(MAKE_SRCS): Makefile $(TESTDIR)Makefile $(TESTDIR)Rules.mak $(TESTDIR)Test.mak
 $(U_TARGETS): $(U_TARGET_SRCS) $(MAKE_SRCS)
 	$(showlink)
 	$(Q)$(CC) $(filter-out $(CFLAGS-OMIT-$@),$(CFLAGS)) $(EXTRA_CFLAGS) $(CFLAGS_$(notdir $(CURDIR))) $(CFLAGS_$@) -c $@.c -o $@.o
-	$(Q)$(CC) $(LDFLAGS) $@.o -o $@ $(EXTRA_LDFLAGS) $(LDFLAGS_$@)
+	$(Q)$(CC) $(LDFLAGS) $@.o -o $@ $(EXTRA_LDFLAGS) $(LDFLAGS_$@) -lc
 
 $(G_TARGETS): $(U_TARGET_SRCS) $(MAKE_SRCS)
 	$(showlink)
 	$(Q)$(HOSTCC) $(filter-out $(HOST_CFLAGS-OMIT-$(patsubst %_glibc,%,$@)),$(HOST_CFLAGS)) \
 	$(CFLAGS_$(notdir $(CURDIR))) $(CFLAGS_$(patsubst %_glibc,%,$@)) \
-	-c $(patsubst %_glibc,%,$@).c -o $@.o
+	-D_GLIBC_TEST -c $(patsubst %_glibc,%,$@).c -o $@.o
 	$(Q)$(HOSTCC) $(HOST_LDFLAGS) $@.o -o $@ $(EXTRA_LDFLAGS) $(LDFLAGS_$(patsubst %_glibc,%,$@)) $(LDFLAGS_$@)
 
 
@@ -121,15 +121,24 @@ shell_%:
 %.so: %.c
 	$(showlink)
 	$(Q)$(CC) \
-		$(filter-out $(CFLAGS-OMIT-$<),$(CFLAGS)) $(EXTRA_CFLAGS) \
-		$(CFLAGS_$(patsubst %_glibc,%,$@)) \
+		$(filter-out $(CFLAGS-OMIT-$@),$(CFLAGS)) $(EXTRA_CFLAGS) \
+		$(CFLAGS_$@) \
 		-fPIC -shared $< -o $@ -Wl,-soname,$@ \
-		$(filter-out $(LDFLAGS-OMIT-$<),$(LDFLAGS)) $(EXTRA_LIBS) \
-		$(LDFLAGS_$(patsubst %_glibc,%,$@))
+		$(filter-out $(LDFLAGS-OMIT-$@),$(LDFLAGS)) $(EXTRA_LIBS) \
+		$(LDFLAGS_$@) -lc
+
+%.so.glibc: %.c
+	$(showlink)
+	$(Q)$(HOSTCC) \
+ 		$(filter-out $(HOST_CFLAGS-OMIT-$(patsubst %_glibc,%,$@)),$(HOST_CFLAGS)) \
+		-D_GLIBC_TEST $(CFLAGS_$(patsubst %.glibc,%,$@)) \
+		-fPIC -shared $< -o $@ -Wl,-soname,$@ \
+		$(filter-out $(HOST_LDFLAGS-OMIT-$(patsubst %_glibc,%,$@)),$(HOST_LDFLAGS)) $(EXTRA_LIBS) \
+		$(patsubst %.so,%.so.glibc,$(LDFLAGS_$(patsubst %.glibc,%,$@)))
 
 clean:
 	$(showclean)
-	$(Q)$(RM) *.a *.o *.so *~ core *.out *.gdb $(CLEAN_TARGETS) $(EXTRA_CLEAN)
+	$(Q)$(RM) *.a *.o *.so *.so.glibc *~ core *.out *.gdb $(CLEAN_TARGETS) $(EXTRA_CLEAN)
 	$(Q)$(RM_R) $(EXTRA_DIRS)
 
 .PHONY: all check clean test run compile
diff --git a/test/testsuite.h b/test/testsuite.h
--- a/test/testsuite.h
+++ b/test/testsuite.h
@@ -98,4 +98,10 @@ void init_testsuite(const char* testname)
 
 #define STR_CMD(cmd) cmd
 
+#ifdef _GLIBC_TEST
+#define _SO_EXT	".so.glibc"
+#else /* _GLIBC_TEST */
+#define _SO_EXT	".so"
+#endif /* _GLIBC_TEST */
+
 #endif	/* TESTSUITE_H */
-- 
