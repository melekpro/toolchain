ARM: Updates from upstream

 0eaaf662 ldso: use .arm mode for resolver unconditionally
 0a718a01 arm: avoid 2 compiler warnings
 09055cc1 nptl: Fix arm pt-vfork
 f7db1709 libc: add guard for arm thumb2 asm
 c78cc485 arm: thumb1: Fix conflicting types for _v3

diff --git a/ldso/ldso/arm/resolve.S b/ldso/ldso/arm/resolve.S
--- a/ldso/ldso/arm/resolve.S
+++ b/ldso/ldso/arm/resolve.S
@@ -101,7 +101,7 @@
 
  .text
  .align 4      @ 16 byte boundary and there are 32 bytes below (arm case)
- #if !defined(__thumb__) || defined(__thumb2__)
+#if 1 /*(!defined(__thumb__) || defined __THUMB_INTERWORK__) || defined(__thumb2__)*/
  .arm
  .globl _dl_linux_resolve
  .type _dl_linux_resolve,%function
diff --git a/libc/sysdeps/linux/arm/aeabi_assert.c b/libc/sysdeps/linux/arm/aeabi_assert.c
--- a/libc/sysdeps/linux/arm/aeabi_assert.c
+++ b/libc/sysdeps/linux/arm/aeabi_assert.c
@@ -21,7 +21,7 @@
 #include <stdlib.h>
 
 
-void __aeabi_assert(const char *assertion, const char *file, unsigned int line);
+void __aeabi_assert(const char *assertion, const char *file, unsigned int line) attribute_noreturn;
 void __aeabi_assert(const char *assertion, const char *file, unsigned int line)
 {
   __assert (assertion, file, line, NULL);
diff --git a/libc/sysdeps/linux/arm/aeabi_mb_cur_max.c b/libc/sysdeps/linux/arm/aeabi_mb_cur_max.c
--- a/libc/sysdeps/linux/arm/aeabi_mb_cur_max.c
+++ b/libc/sysdeps/linux/arm/aeabi_mb_cur_max.c
@@ -20,8 +20,8 @@
 #include <locale.h>
 #include <stdlib.h>
 
-int
-__aeabi_MB_CUR_MAX (void)
+int __aeabi_MB_CUR_MAX (void);
+int __aeabi_MB_CUR_MAX (void)
 {
   return MB_CUR_MAX;
 }
diff --git a/libc/sysdeps/linux/arm/bits/arm_asm.h b/libc/sysdeps/linux/arm/bits/arm_asm.h
--- a/libc/sysdeps/linux/arm/bits/arm_asm.h
+++ b/libc/sysdeps/linux/arm/bits/arm_asm.h
@@ -3,8 +3,10 @@
 #define _ARM_ASM_H
 
 #ifdef __thumb2__
+# ifdef __ASSEMBLER__
 .thumb
 .syntax unified
+# endif /* __ASSEMBLER__ */
 #define IT(t, cond) i##t cond
 #else
 /* XXX: This can be removed if/when we require an assembler that supports
diff --git a/libc/sysdeps/linux/arm/bits/syscalls.h b/libc/sysdeps/linux/arm/bits/syscalls.h
--- a/libc/sysdeps/linux/arm/bits/syscalls.h
+++ b/libc/sysdeps/linux/arm/bits/syscalls.h
@@ -87,15 +87,15 @@
     {									\
       int _sys_buf[2];							\
       register int __a1 __asm__ ("a1");					\
-      register int *_v3 __asm__ ("v3") = _sys_buf;			\
-      *_v3 = (int) (name);						\
+      register int *__v3 __asm__ ("v3") = _sys_buf;			\
+      *__v3 = (int) (name);						\
       LOAD_ARGS_##nr (args)						\
       __asm__ __volatile__ ("str	r7, [v3, #4]\n"			\
 		    "\tldr	r7, [v3]\n"				\
 		    "\tswi	0	@ syscall " #name "\n"		\
 		    "\tldr	r7, [v3, #4]"				\
 		    : "=r" (__a1)					\
-		    : "r" (_v3) ASM_ARGS_##nr				\
+		    : "r" (__v3) ASM_ARGS_##nr				\
                     : "memory");					\
 	__internal_sys_result = __a1;					\
     }									\
@@ -129,20 +129,20 @@
   register int __a4 __asm__ ("a4") = __a4tmp;
 #define ASM_ARGS_4	ASM_ARGS_3, "r" (__a4)
 #define LOAD_ARGS_5(a1, a2, a3, a4, a5)		\
-  int _v1tmp = (int) (a5);			\
+  int __v1tmp = (int) (a5);			\
   LOAD_ARGS_4 (a1, a2, a3, a4)			\
-  register int _v1 __asm__ ("v1") = _v1tmp;
-#define ASM_ARGS_5	ASM_ARGS_4, "r" (_v1)
+  register int __v1 __asm__ ("v1") = __v1tmp;
+#define ASM_ARGS_5	ASM_ARGS_4, "r" (__v1)
 #define LOAD_ARGS_6(a1, a2, a3, a4, a5, a6)	\
-  int _v2tmp = (int) (a6);			\
+  int __v2tmp = (int) (a6);			\
   LOAD_ARGS_5 (a1, a2, a3, a4, a5)		\
-  register int _v2 __asm__ ("v2") = _v2tmp;
-#define ASM_ARGS_6	ASM_ARGS_5, "r" (_v2)
+  register int __v2 __asm__ ("v2") = __v2tmp;
+#define ASM_ARGS_6	ASM_ARGS_5, "r" (__v2)
 #define LOAD_ARGS_7(a1, a2, a3, a4, a5, a6, a7)	\
-  int _v3tmp = (int) (a7);			\
+  int __v3tmp = (int) (a7);			\
   LOAD_ARGS_6 (a1, a2, a3, a4, a5, a6)		\
-  register int _v3 __asm__ ("v3") = _v3tmp;
-#define ASM_ARGS_7	ASM_ARGS_6, "r" (_v3)
+  register int __v3 __asm__ ("v3") = __v3tmp;
+#define ASM_ARGS_7	ASM_ARGS_6, "r" (__v3)
 
 
 #endif /* __ASSEMBLER__ */
diff --git a/libpthread/nptl/sysdeps/unix/sysv/linux/arm/pt-vfork.S b/libpthread/nptl/sysdeps/unix/sysv/linux/arm/pt-vfork.S
--- a/libpthread/nptl/sysdeps/unix/sysv/linux/arm/pt-vfork.S
+++ b/libpthread/nptl/sysdeps/unix/sysv/linux/arm/pt-vfork.S
@@ -35,4 +35,4 @@
 	cmp	r0, #0;			/* If we are the parent... */	\
 	strne	r3, [r2, #PID_OFFSET]	/* ... restore the saved PID.  */
 
-#INCLUDE <../../../../../../../LIBC/SYSDEPS/LINUX/ARM/VFORK.S>
+#include "../../../../../../../libc/sysdeps/linux/arm/vfork.S"
