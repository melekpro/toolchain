From: Waldemar Brodkorb <wbx@uclibc-ng.org>
Date: Fri, 25 Nov 2016 23:04:25 +0100
Subject: add aligned_alloc required for latest gcc libstdc++

[ uClibc-ng cee0b058fa, 9ff01fc11a ]

---
 include/stdlib.h                       |    6 ++++++
 include/sys/cdefs.h                    |    9 +++++++++
 libc/stdlib/malloc-standard/memalign.c |    1 +
 libc/stdlib/malloc/memalign.c          |    1 +
 4 files changed, 17 insertions(+)

diff --git a/include/stdlib.h b/include/stdlib.h
--- a/include/stdlib.h
+++ b/include/stdlib.h
@@ -529,6 +529,12 @@ extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
      __THROW __nonnull ((1)) __wur;
 #endif
 
+#ifdef __USE_ISOC11
+/* ISO C variant of aligned allocation.  */
+extern void *aligned_alloc (size_t __alignment, size_t __size)
+     __THROW __attribute_malloc__ __attribute_alloc_size__ ((2)) __wur;
+#endif
+
 __BEGIN_NAMESPACE_STD
 /* Abort execution and generate a core-dump.  */
 extern void abort (void) __THROW __attribute__ ((__noreturn__));
diff --git a/include/sys/cdefs.h b/include/sys/cdefs.h
--- a/include/sys/cdefs.h
+++ b/include/sys/cdefs.h
@@ -222,6 +222,15 @@
 # define __attribute_malloc__ /* Ignore */
 #endif
 
+/* Tell the compiler which arguments to an allocation function
+   indicate the size of the allocation.  */
+#if __GNUC_PREREQ (4, 3)
+# define __attribute_alloc_size__(params) \
+  __attribute__ ((__alloc_size__ params))
+#else
+# define __attribute_alloc_size__(params) /* Ignore.  */
+#endif
+
 /* At some point during the gcc 2.96 development the `pure' attribute
    for functions was introduced.  We don't want to use it unconditionally
    (although this would be possible) since it generates warnings.  */
diff --git a/libc/stdlib/malloc-standard/memalign.c b/libc/stdlib/malloc-standard/memalign.c
--- a/libc/stdlib/malloc-standard/memalign.c
+++ b/libc/stdlib/malloc-standard/memalign.c
@@ -127,4 +127,5 @@ void* memalign(size_t alignment, size_t bytes)
     __MALLOC_UNLOCK;
 	return retval;
 }
+weak_alias(memalign, aligned_alloc)
 libc_hidden_def(memalign)
diff --git a/libc/stdlib/malloc/memalign.c b/libc/stdlib/malloc/memalign.c
--- a/libc/stdlib/malloc/memalign.c
+++ b/libc/stdlib/malloc/memalign.c
@@ -93,4 +93,5 @@ memalign (size_t alignment, size_t size)
 
   return MALLOC_SETUP (base, end_addr - (unsigned long)base);
 }
+weak_alias(memalign, aligned_alloc)
 libc_hidden_def(memalign)
-- 
