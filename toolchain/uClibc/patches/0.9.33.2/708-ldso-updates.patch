ldso: Upstream updates

 f9946285ce libdl.c,dl-string.h: do not use inlined _dl_memset and others in libdl
 100ad375a3 dl-elf.h: remove unused prototype
 1130df6d42 dl-hash.h: remove unused _dl_symbol and unneeded prototypes
 b57e9640db ldso/libdl: Also include dl-tls.h for for !SHARED.

---
diff --git a/ldso/include/dl-elf.h b/ldso/include/dl-elf.h
--- a/ldso/include/dl-elf.h
+++ b/ldso/include/dl-elf.h
@@ -39,8 +39,6 @@ extern struct elf_resolve * _dl_load_shared_library(unsigned rflags,
 	int trace_loaded_objects);
 extern struct elf_resolve * _dl_load_elf_shared_library(unsigned rflags,
 	struct dyn_elf **rpnt, const char *libname);
-extern struct elf_resolve *_dl_check_if_named_library_is_loaded(const char *full_libname,
-	int trace_loaded_objects);
 extern int _dl_linux_resolve(void);
 extern int _dl_fixup(struct dyn_elf *rpnt, struct r_scope_elem *scope, int flag);
 extern void _dl_protect_relro (struct elf_resolve *l);
diff --git a/ldso/include/dl-hash.h b/ldso/include/dl-hash.h
--- a/ldso/include/dl-hash.h
+++ b/ldso/include/dl-hash.h
@@ -160,17 +160,7 @@ extern char *_dl_find_hash(const char *name, struct r_scope_elem *scope,
 		struct elf_resolve *mytpnt, int type_class,
 		struct symbol_ref *symbol);
 
-extern int _dl_linux_dynamic_link(void);
-
 extern char * _dl_library_path;
-extern char * _dl_not_lazy;
-
-static __inline__ int _dl_symbol(char * name)
-{
-  if (name[0] != '_' || name[1] != 'd' || name[2] != 'l' || name[3] != '_')
-    return 0;
-  return 1;
-}
 
 #define LD_ERROR_NOFILE 1
 #define LD_ERROR_NOZERO 2
diff --git a/ldso/include/dl-string.h b/ldso/include/dl-string.h
--- a/ldso/include/dl-string.h
+++ b/ldso/include/dl-string.h
@@ -19,25 +19,11 @@
 # define do_div_10(result, remain) ((result) /= 10)
 #endif
 
-static size_t _dl_strlen(const char *str);
-static char *_dl_strcat(char *dst, const char *src);
-static char *_dl_strcpy(char *dst, const char *src);
-static int _dl_strcmp(const char *s1, const char *s2);
-static int _dl_strncmp(const char *s1, const char *s2, size_t len);
-static char *_dl_strchr(const char *str, int c);
-static char *_dl_strrchr(const char *str, int c);
-static char *_dl_strstr(const char *s1, const char *s2);
-static void *_dl_memcpy(void *dst, const void *src, size_t len);
-static int _dl_memcmp(const void *s1, const void *s2, size_t len);
-static void *_dl_memset(void *str, int c, size_t len);
-static char *_dl_get_last_path_component(char *path);
-static char *_dl_simple_ltoa(char *local, unsigned long i);
-static char *_dl_simple_ltoahex(char *local, unsigned long i);
-
 #ifndef NULL
 #define NULL ((void *) 0)
 #endif
 
+#ifndef IS_IN_libdl
 static __always_inline size_t _dl_strlen(const char *str)
 {
 	register const char *ptr = (char *) str-1;
@@ -84,22 +70,6 @@ static __always_inline int _dl_strcmp(const char *s1, const char *s2)
 	return c1 - c2;
 }
 
-static __always_inline int _dl_strncmp(const char *s1, const char *s2, size_t len)
-{
-	register unsigned char c1 = '\0';
-	register unsigned char c2 = '\0';
-
-	s1--;s2--;
-	while (len > 0) {
-		c1 = (unsigned char) *++s1;
-		c2 = (unsigned char) *++s2;
-		if (c1 == '\0' || c1 != c2)
-			return c1 - c2;
-		len--;
-	}
-	return c1 - c2;
-}
-
 static __always_inline char * _dl_strchr(const char *str, int c)
 {
 	register char ch;
@@ -228,6 +198,17 @@ static __always_inline char * _dl_get_last_path_component(char *path)
 		;/* empty */
 	return ptr == path ? ptr : ptr+1;
 }
+#else /* IS_IN_libdl */
+# define _dl_strlen strlen
+# define _dl_strcat strcat
+# define _dl_strcpy strcpy
+# define _dl_strcmp strcmp
+# define _dl_strrchr strrchr
+# define _dl_strstr strstr
+# define _dl_memcpy memcpy
+# define _dl_memcmp memcmp
+# define _dl_memset memset
+#endif /* IS_IN_libdl */
 
 /* Early on, we can't call printf, so use this to print out
  * numbers using the SEND_STDERR() macro.  Avoid using mod
diff --git a/ldso/libdl/libdl.c b/ldso/libdl/libdl.c
--- a/ldso/libdl/libdl.c
+++ b/ldso/libdl/libdl.c
@@ -32,7 +32,7 @@
 
 #include <ldso.h>
 #include <stdio.h>
-#include <string.h> /* Needed for 'strstr' prototype' */
+#include <string.h>
 #include <stdbool.h>
 #include <bits/uClibc_mutex.h>
 
@@ -42,6 +42,7 @@
 
 #if defined(USE_TLS) && USE_TLS
 #include <ldsodefs.h>
+#include <dl-tls.h>
 extern void _dl_add_to_slotinfo(struct link_map  *l);
 #endif
 
@@ -51,7 +52,6 @@ __UCLIBC_MUTEX_STATIC(_dl_mutex, PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP);
 
 #ifdef SHARED
 # if defined(USE_TLS) && USE_TLS
-# include <dl-tls.h>
 extern struct link_map *_dl_update_slotinfo(unsigned long int req_modid);
 # endif
 
@@ -393,7 +393,7 @@ static void *do_dlopen(const char *libname, int flag)
 		return NULL;
 	}
 	dyn_chain = (struct dyn_elf *) malloc(sizeof(struct dyn_elf));
-	_dl_memset(dyn_chain, 0, sizeof(struct dyn_elf));
+	memset(dyn_chain, 0, sizeof(struct dyn_elf));
 	dyn_chain->dyn = tpnt;
 	tpnt->rtld_flags |= (flag & RTLD_GLOBAL);
 
@@ -444,7 +444,7 @@ static void *do_dlopen(const char *libname, int flag)
 
 				/* This list is for dlsym() and relocation */
 				dyn_ptr->next = (struct dyn_elf *) malloc(sizeof(struct dyn_elf));
-				_dl_memset (dyn_ptr->next, 0, sizeof (struct dyn_elf));
+				memset (dyn_ptr->next, 0, sizeof (struct dyn_elf));
 				dyn_ptr = dyn_ptr->next;
 				dyn_ptr->dyn = tpnt1;
 				/* Used to record RTLD_LOCAL scope */
-- 
