[v3] linuxthreads.old: Fix segfault when pthread_mutex_unlock() called against unlocked NORMAL mutex.

Althought, it is undefined behavior, there is no reason for segfault.

 Program received signal SIGSEGV, Segmentation fault.
 __pthread_unlock (lock=lock@entry=0x804b03c <lock+16>)
    at libpthread/linuxthreads.old/spinlock.c:234
 234                 (&lock->__status, oldstatus, (long)(thr->p_nextlock) & ~1L))

It occurs only on platforms which has HAS_COMPARE_AND_SWAP defined.

Restore glibc commit fbaf6e72d6 "spinlock.c (__pthread_unlock): Don't crash if
called for an untaken mutex." behavior, broken later by commit 4ad1d0cfbf.


Signed-off-by: Leonid Lisovskiy <lly.dev@gmail.com>
---

diff --git a/libpthread/linuxthreads.old/spinlock.c b/libpthread/linuxthreads.old/spinlock.c
--- a/libpthread/linuxthreads.old/spinlock.c
+++ b/libpthread/linuxthreads.old/spinlock.c
@@ -188,10 +188,16 @@ int __pthread_unlock(struct _pthread_fastlock * lock)
   WRITE_MEMORY_BARRIER();
 
 again:
-  while ((oldstatus = lock->__status) == 1) {
-    if (__compare_and_swap_with_release_semantics(&lock->__status,
+  oldstatus = lock->__status;
+  if (oldstatus == 0 || oldstatus == 1) {
+    /* No threads are waiting for this lock.  Please note that we also
+       enter this case if the lock is not taken at all.  If this wouldn't
+       be done here we would crash further down.  */
+    if (! __compare_and_swap_with_release_semantics(&lock->__status,
 	oldstatus, 0))
-      return 0;
+      goto again;
+
+    return 0;
   }
 
   /* Find thread in waiting queue with maximal priority */
diff -uNBp /dev/null b/test/pthread/ex8-mtx-odd.c
--- /dev/null
+++ b/test/pthread/ex8-mtx-odd.c	2010-09-30 11:04:24.000000000 +0400
@@ -0,0 +1,56 @@
+/* Copyright (C) 2002 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <errno.h>
+#include <pthread.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <time.h>
+
+
+static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
+
+static int
+do_test (void)
+{
+
+  if (pthread_mutex_lock (&lock) != 0)
+    {
+      puts ("mutex_lock failed");
+      exit (1);
+    }
+
+  if (pthread_mutex_unlock (&lock) != 0)
+    {
+      puts ("1st mutex_unlock failed");
+      exit (1);
+    }
+
+  if (pthread_mutex_unlock (&lock) != 0)
+    {
+      puts ("2nd mutex_unlock failed");
+      exit (1);
+    }
+
+  return 0;
+}
+
+#define TEST_FUNCTION do_test ()
+#include "../test-skeleton.c"
-- 
