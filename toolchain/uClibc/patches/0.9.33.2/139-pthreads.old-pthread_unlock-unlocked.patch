linuxthreads.old: Fix segfault when pthread_mutex_unlock() called against unlocked NORMAL mutex.

Althought, it is undefined behavior, there is no reason for segfault.
See http://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_mutex_lock.html


Signed-off-by: Leonid Lisovskiy <lly.dev@gmail.com>
---

diff --git a/libpthread/linuxthreads.old/mutex.c b/libpthread/linuxthreads.old/mutex.c
--- a/libpthread/linuxthreads.old/mutex.c
+++ b/libpthread/linuxthreads.old/mutex.c
@@ -171,7 +171,8 @@ int attribute_hidden __pthread_mutex_unlock(pthread_mutex_t * mutex)
 {
   switch (mutex->__m_kind) {
   case PTHREAD_MUTEX_ADAPTIVE_NP:
-    __pthread_unlock(&mutex->__m_lock);
+    if (mutex->__m_lock.__status != 0)
+      __pthread_unlock(&mutex->__m_lock);
     return 0;
   case PTHREAD_MUTEX_RECURSIVE_NP:
     if (mutex->__m_owner != thread_self())
diff -uNBp /dev/null b/test/pthread/ex8-mtx-odd.c
--- /dev/null
+++ b/test/pthread/ex8-mtx-odd.c	2010-09-30 11:04:24.000000000 +0400
@@ -0,0 +1,56 @@
+/* Copyright (C) 2002 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <errno.h>
+#include <pthread.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <time.h>
+
+
+static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
+
+static int
+do_test (void)
+{
+
+  if (pthread_mutex_lock (&lock) != 0)
+    {
+      puts ("mutex_lock failed");
+      exit (1);
+    }
+
+  if (pthread_mutex_unlock (&lock) != 0)
+    {
+      puts ("1st mutex_unlock failed");
+      exit (1);
+    }
+
+  if (pthread_mutex_unlock (&lock) != 0)
+    {
+      puts ("2nd mutex_unlock failed");
+      exit (1);
+    }
+
+  return 0;
+}
+
+#define TEST_FUNCTION do_test ()
+#include "../test-skeleton.c"
-- 
