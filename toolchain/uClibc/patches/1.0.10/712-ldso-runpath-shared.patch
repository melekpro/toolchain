ldso: Allow use of executable RUNPATH/RPATH when finding libraries needed by other libraries.

 Allow ldso to use the executables RUNPATH/RPATH to find libraries
 needed by other libraries. Although, this change is not standart,
 it cause the uclibc dynamic linker behavour to match the glibc's one.


Signed-off-by: Leonid Lisovskiy <lly.dev@gmail.com>
---

diff --git a/ldso/ldso/dl-elf.c b/ldso/ldso/dl-elf.c
--- a/ldso/ldso/dl-elf.c
+++ b/ldso/ldso/dl-elf.c
@@ -234,15 +234,26 @@ struct elf_resolve *_dl_load_shared_library(unsigned rflags, struct dyn_elf **rp
 	 * the default path of /usr/lib.  Check in rpath directories.
 	 */
 #ifdef __LDSO_RUNPATH__
-	pnt = (tpnt ? (char *) tpnt->dynamic_info[DT_RPATH] : NULL);
-	if (pnt) {
-		pnt += (unsigned long) tpnt->dynamic_info[DT_STRTAB];
-		_dl_if_debug_dprint("\tsearching RPATH='%s'\n", pnt);
-		if ((tpnt1 = search_for_named_library(libname, rflags, pnt, rpnt,
-						      tpnt->libname)) != NULL)
-			return tpnt1;
-
-	}
+	if (tpnt) {
+		pnt = (char *) tpnt->dynamic_info[DT_RPATH];
+		if (pnt) {
+			pnt += (unsigned long) tpnt->dynamic_info[DT_STRTAB];
+		}
+#ifdef __LDSO_RUNPATH_OF_EXECUTABLE__
+		else if (tpnt->libtype == elf_lib) {
+			/* Shared library hasn't RPATH, use executable one, like glibc */
+			pnt = (char *) _dl_loaded_modules->dynamic_info[DT_RPATH];
+			if (pnt)
+				pnt += (unsigned long) _dl_loaded_modules->dynamic_info[DT_STRTAB];
+		}
+#endif
+		if (pnt) {
+			_dl_if_debug_dprint("\tsearching RPATH='%s'\n", pnt);
+			tpnt1 = search_for_named_library(libname, rflags, pnt, rpnt, tpnt->libname);
+			if (tpnt1 != NULL)
+				return tpnt1;
+		}
+	}
 #endif
 
 #ifdef __LDSO_LD_LIBRARY_PATH__
@@ -259,25 +269,26 @@ struct elf_resolve *_dl_load_shared_library(unsigned rflags, struct dyn_elf **rp
 	 * The ABI specifies that RUNPATH is searched after LD_LIBRARY_PATH.
 	 */
 #ifdef __LDSO_RUNPATH__
-	pnt = (tpnt ? (char *)tpnt->dynamic_info[DT_RUNPATH] : NULL);
-	if (pnt) {
-		pnt += (unsigned long) tpnt->dynamic_info[DT_STRTAB];
-		_dl_if_debug_dprint("\tsearching RUNPATH='%s'\n", pnt);
-		if ((tpnt1 = search_for_named_library(libname, rflags, pnt, rpnt, NULL)) != NULL)
-			return tpnt1;
-	}
+	if (tpnt) {
+		pnt = (char *) tpnt->dynamic_info[DT_RUNPATH];
+		if (pnt) {
+			pnt += (unsigned long) tpnt->dynamic_info[DT_STRTAB];
+		}
 #ifdef __LDSO_RUNPATH_OF_EXECUTABLE__
-        /*
-         * Try the DT_RPATH of the executable itself.
-         */
-        pnt = (char *) _dl_loaded_modules->dynamic_info[DT_RPATH];
-        if (pnt) {
-                pnt += (unsigned long) _dl_loaded_modules->dynamic_info[DT_STRTAB];
-                _dl_if_debug_dprint("\tsearching exe's RPATH='%s'\n", pnt);
-                if ((tpnt1 = search_for_named_library(libname, rflags, pnt, rpnt, NULL)) != NULL)
-                        return tpnt1;
-        }
+		else if (tpnt->libtype == elf_lib) {
+			/* Shared library hasn't RUNPATH, use executable one, like glibc */
+			pnt = (char *) _dl_loaded_modules->dynamic_info[DT_RUNPATH];
+			if (pnt)
+				pnt += (unsigned long) _dl_loaded_modules->dynamic_info[DT_STRTAB];
+		}
 #endif
+		if (pnt) {
+			_dl_if_debug_dprint("\tsearching RUNPATH='%s'\n", pnt);
+			tpnt1 = search_for_named_library(libname, rflags, pnt, rpnt, tpnt->libname);
+			if (tpnt1 != NULL)
+				return tpnt1;
+		}
+	}
 #endif
 
 	/*
@@ -326,38 +336,6 @@ struct elf_resolve *_dl_load_shared_library(unsigned rflags, struct dyn_elf **rp
 	if (tpnt1 != NULL)
 		return tpnt1;
 
-#ifdef __LDSO_RUNPATH_OF_EXECUTABLE__
-	/* Very last resort, try the executable's DT_RUNPATH and DT_RPATH */
-	/* http://www.sco.com/developers/gabi/latest/ch5.dynamic.html#shobj_dependencies
-	 * The set of directories specified by a given DT_RUNPATH entry is
-	 * used to find only the immediate dependencies of the executable or
-	 * shared object containing the DT_RUNPATH entry. That is, it is
-	 * used only for those dependencies contained in the DT_NEEDED
-	 * entries of the dynamic structure containing the DT_RUNPATH entry,
-	 * itself. One object's DT_RUNPATH entry does not affect the search
-	 * for any other object's dependencies.
-	 *
-	 * glibc (around 2.19) violates this and the usual suspects are
-	 * abusing this bug^Wrelaxed, user-friendly behaviour.
-	 */
-
-	pnt = (char *) _dl_loaded_modules->dynamic_info[DT_RUNPATH];
-	if (pnt) {
-		pnt += (unsigned long) _dl_loaded_modules->dynamic_info[DT_STRTAB];
-		_dl_if_debug_dprint("\tsearching exe's RUNPATH='%s'\n", pnt);
-		if ((tpnt1 = search_for_named_library(libname, rflags, pnt, rpnt, NULL)) != NULL)
-			return tpnt1;
-	}
-	pnt = (char *) _dl_loaded_modules->dynamic_info[DT_RPATH];
-	if (pnt) {
-		pnt += (unsigned long) _dl_loaded_modules->dynamic_info[DT_STRTAB];
-		_dl_if_debug_dprint("\tsearching exe's RPATH='%s'\n", pnt);
-		if ((tpnt1 = search_for_named_library(libname, rflags, pnt, rpnt, NULL)) != NULL)
-			return tpnt1;
-	}
-#endif
-
-
 goof:
 	/* Well, we shot our wad on that one.  All we can do now is punt */
 	if (_dl_internal_error_number)
-- 
